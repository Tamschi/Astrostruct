/**
 * @file NPacket.hpp
 * @brief Handles packing together packet data as well as decoding it.
 * @author Dalton Nell
 * @version 1.0
 * @date 2012-06-20
 */
#ifndef NAELSTROF_PACKET
#define NAELSTROF_PACKET

/**
 * @brief Introduces a player to the server.
 */
class NPacketIntroduction
{
public:
	NPacketIntroduction(std::string i_Name);
	NPacketIntroduction();
	char Name[64];
};

/**
 * @brief Sends a response to an introduction, 0 for acceptance, or >0 for errors of somekind (banned, full server, etc).
 */
class NPacketResponse
{
public:
	NPacketResponse(char i_Response);
	NPacketResponse();
	char Response;
};

/**
 * @brief Sends new player data to create and tag a new player.
 */
class NPacketNewPlayer
{
public:
	NPacketNewPlayer(NPlayer* Player);
	NPacketNewPlayer();
	char Name[64];
	unsigned int ID;
	glm::vec3 Pos;
};

/**
 * @brief Sends player updates.
 */
class NPacketPlayer
{
public:
	NPacketPlayer(NPlayer* Player);
	NPacketPlayer();
	unsigned int ID;
	float Direction;
	bool Moving;
	glm::vec3 Pos;
	glm::vec3 Vel;
};

/**
 * @brief Tells to remove a player from the game.
 */
class NPacketDisconnectPlayer
{
public:
	NPacketDisconnectPlayer(unsigned int i_ID);
	NPacketDisconnectPlayer();
	unsigned int ID;
};

/**
 * @brief Sends chat messages around. Has a limit of 128 characters.
 */
class NPacketChat
{
public:
	NPacketChat(std::string Text);
	NPacketChat();
	unsigned int ID;
	char Message[128];
};

/**
 * @brief Manages packing together data information, so we only ever have to send one packet for all game updates.
 */
class NPacket
{
public:
	NPacket();
	/**
	 * @brief Decodes a packet from a string, and assossiates it with an event.
	 *
	 * @param Data The string recieved from enet.
	 * @param i_Event The event generated by enet.
	 */
	NPacket(std::string Data, ENetEvent i_Event);
	/**
	 * @brief Generates a packet with a response, and sends it to the event's peer.
	 *
	 * @param Response The response we want to send.
	 * @param i_Event The event generated by Enet when the peer sends an introduction.
	 */
	NPacket(char Response, ENetEvent i_Event);
	/**
	 * @brief Generates a introduction packet using the player's name.
	 *
	 * @param Name The desired player name.
	 */
	NPacket(std::string Name);
	/**
	 * @brief Generates a player update information, only used to send user input updates to the server.
	 *
	 * @param Player The user's player.
	 */
	NPacket(NPlayer* Player);
	/**
	 * @brief Broadcasts the packet to all peers, or just the host if we are a client.
	 */
	void Broadcast();
	/**
	 * @brief Sends the packet to a specific peer.
	 *
	 * @param Peer The peer that we want to recieve the packet.
	 */
	void Send(ENetPeer* Peer);
	/**
	 * @brief Merges the packet data with the current game state.
	 */
	void Merge();
private:
	ENetEvent Event;
	unsigned int NewPlayerCount;
	std::vector<NPacketNewPlayer> NewPlayers;
	unsigned int PlayerCount;
	std::vector<NPacketPlayer> Players;
	unsigned int DisconnectPlayerCount;
	std::vector<NPacketDisconnectPlayer> DisconnectPlayers;
	unsigned int ChatCount;
	std::vector<NPacketChat> Chat;
	unsigned int IntroductionCount;
	std::vector<NPacketIntroduction> Introductions;
	unsigned int ResponseCount;
	std::vector<NPacketResponse> Responses;
};

/**
 * @brief Handles keeping track of packet related things, like player count, the user's player, and chat data.
 */
class NPacketHandler
{
public:
	NPacketHandler();
	~NPacketHandler();
	/**
	 * @brief Adds the player to the removal queue, so that on the next packet update, the server will send the disconnect packets to all clients.
	 *
	 * @param ID The id of the player to remove.
	 */
	void RemovePlayer(unsigned int ID);
	/**
	 * @brief Adds a new player to the new_player queue, so that on the next packet update, the server will send new player packets to all clients.
	 *
	 * @param Player The player we added.
	 */
	void AddPlayer(NPlayer* Player);
	/**
	 * @brief Gets a list of new added players.
	 *
	 * @return A pointer to the list of added plyaers.
	 */
	std::vector<NPlayer*>* GetNewPlayers();
	/**
	 * @brief Gets a list of disconnected players.
	 *
	 * @return A pointer to the list of disconnected players.
	 */
	std::vector<unsigned int>* GetDisconnectPlayers();
	std::vector<NPlayer*>* GetActivePlayers();
	/**
	 * @brief Gets the user's player. Used by clients to know which player they control.
	 *
	 * @return A pointer to the user's player.
	 */
	NPlayer* GetPlayer();
	/**
	 * @brief Sets the user's player.
	 *
	 * @param Player A pointer to the user's player.
	 */
	void SetPlayer(NPlayer* Player);
private:
	NPlayer* MainPlayer;
	std::vector<NPlayer*> ActivePlayers;
	std::vector<NPlayer*> NewPlayers;
	std::vector<unsigned int> DisconnectPlayers;
};

#endif
