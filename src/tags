!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	NNode.cpp	/^	float A = Color.w;$/;"	l
AMax	NPhysics.cpp	/^	glm::vec2 AMax = glm::vec2(Box.x,Box.y)+glm::vec2(Box.z,Box.w)\/2.f;$/;"	l
AMin	NPhysics.cpp	/^	glm::vec2 AMin = glm::vec2(Box.x,Box.y)-glm::vec2(Box.z,Box.w)\/2.f;$/;"	l
AddAnimation	NTexture.cpp	/^void NTexture::AddAnimation(NAnimation* Animation)$/;"	f	class:NTexture
AddButton	NScene.cpp	/^NButton* NScene::AddButton()$/;"	f	class:NScene
AddCachedAnimation	NRender.cpp	/^void NRender::AddCachedAnimation(NAnimation* Animation)$/;"	f	class:NRender
AddCachedTexture	NRender.cpp	/^void NRender::AddCachedTexture(GLuint Texture)$/;"	f	class:NRender
AddChild	NNode.cpp	/^	Parent->AddChild(this);$/;"	p	file:	signature:(this)
AddChild	NNode.cpp	/^void NNode::AddChild(NNode* Node)$/;"	f	class:NNode	signature:(NNode* Node)
AddFace	NText.cpp	/^void NTextSystem::AddFace(NFace* Face)$/;"	f	class:NTextSystem
AddFrame	NTexture.cpp	/^void NAnimation::AddFrame(std::string FileName)$/;"	f	class:NAnimation
AddMap	NScene.cpp	/^NMap* NScene::AddMap(std::string TileSet)$/;"	f	class:NScene
AddNode	NScene.cpp	/^void NScene::AddNode(NNode* Node)$/;"	f	class:NScene
AddSound	NScene.cpp	/^NSound* NScene::AddSound(std::string Name)$/;"	f	class:NScene
AddSoundData	NSound.cpp	/^void NSoundSystem::AddSoundData(NSoundData* Data)$/;"	f	class:NSoundSystem
AddText	NScene.cpp	/^NText* NScene::AddText(std::wstring Font, std::wstring Data)$/;"	f	class:NScene
AddTexture	NRender.cpp	/^void NRender::AddTexture(NTexture* Texture)$/;"	f	class:NRender
AddWindow	NScene.cpp	/^NWindow* NScene::AddWindow()$/;"	f	class:NScene
AdvanceX	NText.hpp	/^	float AdvanceX;$/;"	m	class:NGlyph
AdvanceY	NText.hpp	/^	float AdvanceY;$/;"	m	class:NGlyph
Ang	NNode.cpp	/^	glm::mat4 Ang = glm::rotate(glm::mat4(),Angle,glm::vec3(0,0,1));$/;"	l
Angle	NNode.hpp	/^	glm::vec3 Angle;$/;"	m	class:NNode
Animation__index	NTexture.cpp	/^int Animation__index(lua_State* L)$/;"	f
Animation__newindex	NTexture.cpp	/^int Animation__newindex(lua_State* L)$/;"	f
Animations	NRender.hpp	/^	std::vector<NAnimation*> Animations;$/;"	m	class:NRender
Animations	NTexture.hpp	/^	std::vector<NAnimation*> Animations;$/;"	m	class:NTexture
BUFFER_SIZE	NSound.hpp	14;"	d
BitmapHeight	NText.hpp	/^	float BitmapHeight;$/;"	m	class:NGlyph
BitmapLeft	NText.hpp	/^	float BitmapLeft;$/;"	m	class:NGlyph
BitmapTop	NText.hpp	/^	float BitmapTop;$/;"	m	class:NGlyph
BitmapWidth	NText.hpp	/^	float BitmapWidth;$/;"	m	class:NGlyph
Blue	NColor.hpp	15;"	d
BorderSize	NButton.hpp	/^	float BorderSize;$/;"	m	class:NButton
BorderSize	NWindow.hpp	/^	float BorderSize;$/;"	m	class:NWindow	access:private
Buffers	NButton.hpp	/^	GLuint* Buffers;$/;"	m	class:NButton
Buffers	NMap.hpp	/^	std::vector<GLuint*> Buffers;$/;"	m	class:NMap
Buffers	NText.hpp	/^	GLuint* Buffers;$/;"	m	class:NText
Buffers	NWindow.hpp	/^	GLuint* Buffers;$/;"	m	class:NWindow	access:private
CXX	Makefile	/^CXX				= g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS		= -g -O2 -I\/usr\/include\/freetype2$/;"	m
CachedTextures	NRender.hpp	/^	std::vector<NCachedTexture*> CachedTextures;$/;"	m	class:NRender
Camera	NRender.hpp	/^	NCamera* Camera;$/;"	m	class:NRender
Changed	NButton.hpp	/^	bool Changed;$/;"	m	class:NButton
Changed	NCamera.hpp	/^	bool Changed;$/;"	m	class:NCamera
Changed	NMap.hpp	/^	std::vector<bool> Changed;$/;"	m	class:NMap
Changed	NText.hpp	/^	bool Changed;$/;"	m	class:NText
Changed	NText.hpp	/^	bool Changed;$/;"	m	class:NTextureAtlas
Changed	NWindow.hpp	/^	bool Changed;$/;"	m	class:NWindow	access:private
Children	NNode.hpp	/^	std::vector<NNode*> Children;$/;"	m	class:NNode
Children	NText.hpp	/^	NTextureNode* Children[2];$/;"	m	class:NTextureNode
CleanUp	NGame.cpp	/^void NGame::CleanUp()$/;"	f	class:NGame
ClearColor	NColor.cpp	/^void ClearColor()$/;"	f	signature:()
ClearColor	NColor.cpp	/^void ClearColor(){}$/;"	f	signature:()
ClearColor	NColor.hpp	/^void ClearColor();$/;"	p	signature:()
Close	NGame.cpp	/^void NGame::Close()$/;"	f	class:NGame
Color	NColor.cpp	/^	std::cout << "\\e[1;" << Color+30 << 'm';$/;"	l
Color	NNode.hpp	/^	glm::vec4 Color;$/;"	m	class:NNode
ColorLoc	NButton.hpp	/^	GLuint ColorLoc;$/;"	m	class:NButton
ColorLoc	NMap.hpp	/^	GLuint ColorLoc, MatrixLoc, TextureLoc;$/;"	m	class:NMap
ColorLoc	NText.hpp	/^	GLuint ColorLoc,TextureLoc,MatrixLoc,ScreenLoc;$/;"	m	class:NText
ColorLoc	NWindow.hpp	/^	GLuint ColorLoc;$/;"	m	class:NWindow	access:private
Config	NGame.hpp	/^	NConfig* Config;$/;"	m	class:NGame
CreateAnimation	NTexture.cpp	/^int CreateAnimation(lua_State* L)$/;"	f
CurTime	NEngine.cpp	/^double CurTime()$/;"	f	signature:()
CurrentTime	NTexture.hpp	/^	double CurrentTime;$/;"	m	class:NTexture
DEFS	Makefile	/^DEFS			= -DHAVE_CONFIG_H$/;"	m
Data	NText.hpp	/^	std::wstring Data;$/;"	m	class:NText
Depth	NMap.hpp	/^	unsigned int Width,Height,Depth;$/;"	m	class:NMap
Difference	NEngine.cpp	/^	float Difference = Max-Min;$/;"	l
DisplayText	NButton.hpp	/^	NText* DisplayText;$/;"	m	class:NButton
DoFile	NLua.cpp	/^bool NLua::DoFile(std::string FileName)$/;"	f	class:NLua
DoFile	NLua.hpp	/^	bool DoFile(std::string File);$/;"	p	class:NLua	access:public	signature:(std::string File)
DoFolder	NLua.cpp	/^bool NLua::DoFolder(std::string Folder)$/;"	f	class:NLua
DoFolder	NLua.hpp	/^	bool DoFolder(std::string Folder);$/;"	p	class:NLua	access:public	signature:(std::string Folder)
Draw	NButton.cpp	/^void NButton::Draw(NCamera* View)$/;"	f	class:NButton
Draw	NMap.cpp	/^void NMap::Draw(NCamera* View)$/;"	f	class:NMap
Draw	NNode.cpp	/^void NNode::Draw(glm::mat4 View) {}$/;"	f	class:NNode	signature:(glm::mat4 View)
Draw	NRender.cpp	/^void NRender::Draw()$/;"	f	class:NRender
Draw	NScene.cpp	/^void NScene::Draw(NCamera* View)$/;"	f	class:NScene
Draw	NText.cpp	/^void NText::Draw(NCamera* View)$/;"	f	class:NText
Draw	NWindow.cpp	/^void NWindow::Draw(NCamera* View)$/;"	f	class:NWindow
Draw	NWindow.hpp	/^	void Draw(glm::mat4 View);$/;"	p	class:NWindow	access:public	signature:(glm::mat4 View)
Eof	NFileSystem.hpp	/^	bool Eof;$/;"	m	class:NFile
Exists	NFileSystem.hpp	/^	bool Exists;$/;"	m	class:NFile
FPS	NRender.hpp	/^	unsigned int FPS;$/;"	m	class:NRender
FPS	NTexture.hpp	/^	float FPS;$/;"	m	class:NAnimation
FTLib	NText.hpp	/^	FT_Library FTLib;$/;"	m	class:NTextSystem
Face	NText.hpp	/^	FT_Face Face;$/;"	m	class:NFace
Face	NText.hpp	/^	NFace* Face;$/;"	m	class:NText
Faces	NText.hpp	/^	std::vector<NFace*> Faces;$/;"	m	class:NTextSystem
Fail	NEngine.hpp	75;"	d
File	NConfig.cpp	/^		std::cout << "Tried to use variable " << Name << " as a boolean (It's not a boolean!). Does it exist in " << File << "?\\n";$/;"	l
File	NConfig.cpp	/^		std::cout << "Tried to use variable " << Name << " as a number (It's not a number!). Does it exist in " << File << "?\\n";$/;"	l
File	NConfig.cpp	/^		std::cout << "Tried to use variable " << Name << " as a string (It's not a string!). Does it exist in " << File << "?\\n";$/;"	l
File	NConfig.hpp	/^	std::string File;$/;"	m	class:NConfig	access:private
File	NFileSystem.hpp	/^	PHYSFS_file* File;$/;"	m	class:NFile
FileData	NText.hpp	/^	char* FileData;$/;"	m	class:NFace
FileSystem	NGame.hpp	/^	NFileSystem* FileSystem;$/;"	m	class:NGame
FrameTime	NRender.hpp	/^	double FrameTime;$/;"	m	class:NRender
Frames	NTexture.hpp	/^	std::vector<NCachedTexture*> Frames;$/;"	m	class:NAnimation
Game	NEngine.hpp	/^static NGame* Game = new NGame();$/;"	v
GenerateBuffers	NButton.cpp	/^void NButton::GenerateBuffers()$/;"	f	class:NButton
GenerateBuffers	NMap.cpp	/^void NMap::GenerateBuffers()$/;"	f	class:NMap
GenerateBuffers	NText.cpp	/^void NText::GenerateBuffers()$/;"	f	class:NText
GenerateBuffers	NWindow.cpp	/^void NWindow::GenerateBuffers()$/;"	f	class:NWindow
GenerateBuffers	NWindow.hpp	/^	void GenerateBuffers();$/;"	p	class:NWindow	access:private	signature:()
GetAng	NNode.cpp	/^float NNode::GetAng()$/;"	f	class:NNode	signature:()
GetBool	NConfig.cpp	/^bool NConfig::GetBool(std::string Name)$/;"	f	class:NConfig	signature:(std::string Name)
GetBool	NConfig.hpp	/^	bool GetBool(std::string Name);$/;"	p	class:NConfig	access:public	signature:(std::string Name)
GetCachedTexture	NRender.cpp	/^NCachedTexture* NRender::GetCachedTexture(std::string Name)$/;"	f	class:NRender
GetCamera	NRender.cpp	/^NCamera* NRender::GetCamera()$/;"	f	class:NRender
GetColor	NNode.cpp	/^glm::vec4 NNode::GetColor()$/;"	f	class:NNode	signature:()
GetConfig	NGame.cpp	/^NConfig* NGame::GetConfig()$/;"	f	class:NGame
GetFace	NText.cpp	/^NFace* NTextSystem::GetFace(std::wstring Name)$/;"	f	class:NTextSystem
GetFile	NFileSystem.cpp	/^NFile NFileSystem::GetFile(std::string File)$/;"	f	class:NFileSystem
GetFileSystem	NGame.cpp	/^NFileSystem* NGame::GetFileSystem()$/;"	f	class:NGame
GetFiles	NFileSystem.cpp	/^std::vector<std::string> NFileSystem::GetFiles(std::string Directory)$/;"	f	class:NFileSystem
GetFloat	NConfig.cpp	/^float NConfig::GetFloat(std::string Name)$/;"	f	class:NConfig	signature:(std::string Name)
GetFloat	NConfig.hpp	/^	float GetFloat(std::string Name);$/;"	p	class:NConfig	access:public	signature:(std::string Name)
GetFloat	NTexture.cpp	/^float NAnimation::GetFloat(std::string i_Name)$/;"	f	class:NAnimation
GetFloat	NTexture.cpp	/^float NTexture::GetFloat(std::string i_Name)$/;"	f	class:NTexture
GetFrameTime	NRender.cpp	/^double NRender::GetFrameTime()$/;"	f	class:NRender
GetFreeTypeLib	NText.cpp	/^FT_Library NTextSystem::GetFreeTypeLib()$/;"	f	class:NTextSystem
GetGame	NEngine.cpp	/^NGame* GetGame()$/;"	f	signature:()
GetGlyph	NText.cpp	/^NGlyph* NFace::GetGlyph(wchar_t ID, unsigned int Size)$/;"	f	class:NFace
GetGlyph	NText.cpp	/^NGlyph* NTextureAtlas::GetGlyph(FT_Face Face, wchar_t ID)$/;"	f	class:NTextureAtlas
GetHeight	NRender.cpp	/^float NCachedTexture::GetHeight()$/;"	f	class:NCachedTexture
GetID	NShader.cpp	/^GLuint NShader::GetID()$/;"	f	class:NShader
GetID	NShader.hpp	/^	GLuint GetID();$/;"	p	class:NShader	access:public	signature:()
GetID	NTexture.cpp	/^GLuint NAnimation::GetID(double Time)$/;"	f	class:NAnimation
GetID	NTexture.cpp	/^GLuint NTexture::GetID()$/;"	f	class:NTexture
GetInput	NGame.cpp	/^NInput* NGame::GetInput()$/;"	f	class:NGame
GetKey	NInput.cpp	/^int NInput::GetKey(int Key)$/;"	f	class:NInput
GetKey	NInput.hpp	/^	int GetKey(int Key);$/;"	p	class:NInput	access:public	signature:(int Key)
GetL	NLua.cpp	/^lua_State* NLua::GetL()$/;"	f	class:NLua
GetL	NLua.hpp	/^	lua_State* GetL();$/;"	p	class:NLua	access:public	signature:()
GetLua	NGame.cpp	/^NLua* NGame::GetLua()$/;"	f	class:NGame
GetModelMatrix	NNode.cpp	/^glm::mat4 NNode::GetModelMatrix()$/;"	f	class:NNode	signature:()
GetMouse	NInput.cpp	/^glm::vec2 NInput::GetMouse()$/;"	f	class:NInput
GetMouse	NInput.hpp	/^	glm::vec2 GetMouse();$/;"	p	class:NInput	access:public	signature:()
GetMouseKey	NInput.cpp	/^int NInput::GetMouseKey(int Key)$/;"	f	class:NInput
GetMouseKey	NInput.hpp	/^	int GetMouseKey(int Key);$/;"	p	class:NInput	access:public	signature:(int Key)
GetMouseX	NInput.cpp	/^int NInput::GetMouseX()$/;"	f	class:NInput
GetMouseX	NInput.hpp	/^	int GetMouseX();$/;"	p	class:NInput	access:public	signature:()
GetMouseY	NInput.cpp	/^int NInput::GetMouseY()$/;"	f	class:NInput
GetMouseY	NInput.hpp	/^	int GetMouseY();$/;"	p	class:NInput	access:public	signature:()
GetName	NShader.cpp	/^std::string NShader::GetName()$/;"	f	class:NShader
GetName	NShader.cpp	/^std::string NUniform::GetName()$/;"	f	class:NUniform
GetName	NShader.hpp	/^	std::string GetName();$/;"	p	class:NShader	access:public	signature:()
GetName	NShader.hpp	/^	std::string GetName();$/;"	p	class:NUniform	access:public	signature:()
GetName	NText.cpp	/^std::wstring NFace::GetName()$/;"	f	class:NFace
GetName	NTexture.cpp	/^std::string NAnimation::GetName()$/;"	f	class:NAnimation
GetNonScaleMatrix	NNode.cpp	/^glm::mat4 NNode::GetNonScaleMatrix()$/;"	f	class:NNode	signature:()
GetOrthoMatrix	NCamera.cpp	/^glm::mat4 NCamera::GetOrthoMatrix()$/;"	f	class:NCamera
GetParent	NNode.cpp	/^NNode* NNode::GetParent()$/;"	f	class:NNode	signature:()
GetPerspMatrix	NCamera.cpp	/^glm::mat4 NCamera::GetPerspMatrix()$/;"	f	class:NCamera
GetPerspViewMatrix	NCamera.cpp	/^glm::mat4 NCamera::GetPerspViewMatrix()$/;"	f	class:NCamera
GetPos	NNode.cpp	/^glm::vec2 NNode::GetPos()$/;"	f	class:NNode	signature:()
GetRender	NGame.cpp	/^NRender* NGame::GetRender()$/;"	f	class:NGame
GetScale	NNode.cpp	/^glm::vec2 NNode::GetScale()$/;"	f	class:NNode	signature:()
GetScene	NGame.cpp	/^NScene* NGame::GetScene()$/;"	f	class:NGame
GetShader	NRender.cpp	/^NShader* NRender::GetShader(std::string Name)$/;"	f	class:NRender
GetSize	NRender.cpp	/^glm::vec2 NCachedTexture::GetSize()$/;"	f	class:NCachedTexture
GetSize	NText.cpp	/^float NText::GetSize()$/;"	f	class:NText
GetSize	NText.cpp	/^unsigned int NTextureAtlas::GetSize()$/;"	f	class:NTextureAtlas
GetSize	NTexture.cpp	/^glm::vec2 NAnimation::GetSize(double Time)$/;"	f	class:NAnimation
GetSize	NTexture.cpp	/^glm::vec2 NTexture::GetSize()$/;"	f	class:NTexture
GetSound	NSound.cpp	/^NSoundData* NSoundSystem::GetSound(std::string Name)$/;"	f	class:NSoundSystem
GetSoundSystem	NGame.cpp	/^NSoundSystem* NGame::GetSoundSystem()$/;"	f	class:NGame
GetString	NConfig.cpp	/^std::string NConfig::GetString(std::string Name)$/;"	f	class:NConfig	signature:(std::string Name)
GetString	NConfig.hpp	/^	std::string GetString(std::string Name);$/;"	p	class:NConfig	access:public	signature:(std::string Name)
GetTextSystem	NGame.cpp	/^NTextSystem* NGame::GetTextSystem()$/;"	f	class:NGame
GetTexture	NRender.cpp	/^NTexture* NRender::GetTexture(std::string Name)$/;"	f	class:NRender
GetTexture	NText.cpp	/^GLuint NFace::GetTexture(unsigned int Size)$/;"	f	class:NFace
GetTexture	NText.cpp	/^GLuint NTextureAtlas::GetTexture()$/;"	f	class:NTextureAtlas
GetTextureFilter	NRender.cpp	/^GLuint NRender::GetTextureFilter()$/;"	f	class:NRender
GetUniformLocation	NShader.cpp	/^GLuint NShader::GetUniformLocation(std::string i_Name)$/;"	f	class:NShader
GetUniformLocation	NShader.cpp	/^GLuint NUniform::GetUniformLocation()$/;"	f	class:NUniform
GetUniformLocation	NShader.hpp	/^	GLuint GetUniformLocation();$/;"	p	class:NUniform	access:public	signature:()
GetUniformLocation	NShader.hpp	/^	GLuint GetUniformLocation(std::string i_Name);$/;"	p	class:NShader	access:public	signature:(std::string i_Name)
GetVSync	NRender.cpp	/^bool NRender::GetVSync()$/;"	f	class:NRender
GetViewMatrix	NCamera.cpp	/^glm::mat4 NCamera::GetViewMatrix()$/;"	f	class:NCamera
GetWidth	NRender.cpp	/^float NCachedTexture::GetWidth()$/;"	f	class:NCachedTexture
GetWidth	NText.cpp	/^float NText::GetWidth()$/;"	f	class:NText
GetWindowChanged	NGame.cpp	/^bool NGame::GetWindowChanged()$/;"	f	class:NGame
GetWindowHeight	NGame.cpp	/^int NGame::GetWindowHeight()$/;"	f	class:NGame
GetWindowSize	NGame.cpp	/^glm::vec2 NGame::GetWindowSize()$/;"	f	class:NGame
GetWindowWidth	NGame.cpp	/^int NGame::GetWindowWidth()$/;"	f	class:NGame
Glyphs	NText.hpp	/^	std::vector<NGlyph*> Glyphs;$/;"	m	class:NTextureAtlas
Good	NFileSystem.cpp	/^bool NFile::Good()$/;"	f	class:NFile
Good	NRender.cpp	/^bool NCachedTexture::Good()$/;"	f	class:NCachedTexture
Good	NTexture.cpp	/^bool NAnimation::Good()$/;"	f	class:NAnimation
Good	NTexture.cpp	/^bool NTexture::Good()$/;"	f	class:NTexture
GoodCheck	NTexture.hpp	/^	bool GoodCheck;$/;"	m	class:NTexture
Green	NColor.hpp	13;"	d
HAVE_FLOOR	config.h	5;"	d
HAVE_INTTYPES_H	config.h	8;"	d
HAVE_MEMORY_H	config.h	11;"	d
HAVE_SQRT	config.h	14;"	d
HAVE_STDBOOL_H	config.h	17;"	d
HAVE_STDINT_H	config.h	20;"	d
HAVE_STDLIB_H	config.h	23;"	d
HAVE_STRINGS_H	config.h	26;"	d
HAVE_STRING_H	config.h	29;"	d
HAVE_SYS_STAT_H	config.h	32;"	d
HAVE_SYS_TYPES_H	config.h	35;"	d
HAVE_UNISTD_H	config.h	38;"	d
HasChildren	NText.hpp	/^	bool HasChildren;$/;"	m	class:NTextureNode
HasImage	NText.hpp	/^	bool HasImage;$/;"	m	class:NTextureNode
Height	NGame.hpp	/^	int Height;$/;"	m	class:NGame
Height	NMap.hpp	/^	unsigned int Width,Height,Depth;$/;"	m	class:NMap
Height	NRender.hpp	/^	int Width, Height;$/;"	m	class:NCachedTexture
Height	NText.hpp	/^	int Width, Height;$/;"	m	class:NTextureAtlas
ID	NMap.hpp	/^	unsigned int ID;$/;"	m	class:NTile
ID	NRender.hpp	/^	GLuint ID;$/;"	m	class:NCachedTexture
ID	NSound.hpp	/^    ALuint ID;$/;"	m	class:NSound
ID	NSound.hpp	/^    ALuint ID;$/;"	m	class:NSoundData
INSTALL	Makefile	/^INSTALL			= \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA	= ${INSTALL} -m 644$/;"	m
Include	NLua.cpp	/^int Include(lua_State* L)$/;"	f
Include	NLua.hpp	/^int Include(lua_State* L);$/;"	p	signature:(lua_State* L)
Init	NGame.cpp	/^bool NGame::Init(int i_Width, int i_Height, std::string Title, int argc, char* argv[])$/;"	f	class:NGame
Init	NMap.cpp	/^void NMap::Init(unsigned int i_Width, unsigned int i_Height, unsigned int i_Depth)$/;"	f	class:NMap
Input	NGame.hpp	/^	NInput* Input;$/;"	m	class:NGame
Insert	NText.cpp	/^NTextureNode* NTextureNode::Insert(glm::vec2 i_Rect)$/;"	f	class:NTextureNode
Intersects	NPhysics.cpp	/^bool Intersects(glm::vec4 Box, glm::vec2 Point)$/;"	f	signature:(glm::vec4 Box, glm::vec2 Point)
Intersects	NPhysics.hpp	/^bool Intersects(glm::vec4 Box, glm::vec2 Point);$/;"	p	signature:(glm::vec4 Box, glm::vec2 Point)
IsChanged	NButton.hpp	/^	bool IsChanged;$/;"	m	class:NButton
IsGood	NRender.hpp	/^	float IsGood;$/;"	m	class:NCachedTexture
IsGood	NTexture.hpp	/^	bool IsGood;$/;"	m	class:NTexture
IsPressed	NButton.hpp	/^	bool IsPressed;$/;"	m	class:NButton
KeyChanged	NInput.cpp	/^bool NInput::KeyChanged(int Key)$/;"	f	class:NInput
KeyChanged	NInput.hpp	/^	bool KeyChanged(int Key);$/;"	p	class:NInput	access:public	signature:(int Key)
Keys	NInput.hpp	/^	int Keys[128];$/;"	m	class:NInput	access:private
L	NConfig.cpp	/^	lua_State* L = GetGame()->GetLua()->GetL();$/;"	l
L	NLua.hpp	/^	lua_State* L;$/;"	m	class:NLua	access:private
LIBS	Makefile	/^LIBS			= -lSOIL -llua -lfreetype -lglfw -lGLEW -lGL $/;"	m
LUA_COMPAT_MODULE	NEngine.hpp	67;"	d
LastTick	NScene.hpp	/^	double LastTick;$/;"	m	class:NScene
LastTime	NRender.hpp	/^	double LastTime;$/;"	m	class:NRender
Load	NShader.cpp	/^bool NShader::Load(std::string VertexFilePath, std::string FragmentFilePath)$/;"	f	class:NShader
Load	NShader.hpp	/^	bool Load(std::string VertexShaderPath,std::string FragmentShaderPath);$/;"	p	class:NShader	access:public	signature:(std::string VertexShaderPath,std::string FragmentShaderPath)
Load	NSound.cpp	/^bool NSoundData::Load(std::string FileName)$/;"	f	class:NSoundData
Load	NText.cpp	/^bool NFace::Load(std::wstring File)$/;"	f	class:NFace
LoadFace	NText.cpp	/^int LoadFace(lua_State* L)$/;"	f
LoadFaces	NText.cpp	/^void NTextSystem::LoadFaces()$/;"	f	class:NTextSystem
LoadShaders	NRender.cpp	/^bool NRender::LoadShaders()$/;"	f	class:NRender
LoadSound	NSound.cpp	/^int LoadSound(lua_State* L)$/;"	f
LoadSounds	NSound.cpp	/^void NSoundSystem::LoadSounds()$/;"	f	class:NSoundSystem
LoadTexture	NTexture.cpp	/^int LoadTexture(lua_State* L)$/;"	f
LoadTextures	NRender.cpp	/^void NRender::LoadTextures()$/;"	f	class:NRender
Lua	NGame.hpp	/^	NLua* Lua;$/;"	m	class:NGame
Matrix	NNode.hpp	/^	glm::mat4 Matrix;$/;"	m	class:NNode
MatrixLoc	NButton.hpp	/^	GLuint MatrixLoc;$/;"	m	class:NButton
MatrixLoc	NMap.hpp	/^	GLuint ColorLoc, MatrixLoc, TextureLoc;$/;"	m	class:NMap
MatrixLoc	NText.hpp	/^	GLuint ColorLoc,TextureLoc,MatrixLoc,ScreenLoc;$/;"	m	class:NText
MatrixLoc	NWindow.hpp	/^	GLuint MatrixLoc;$/;"	m	class:NWindow	access:private
MaxFPS	NRender.hpp	/^	float MaxFPS;$/;"	m	class:NRender
Mode	NText.hpp	/^	int Mode;$/;"	m	class:NText
MouseX	NInput.hpp	/^	int MouseX;$/;"	m	class:NInput	access:private
MouseY	NInput.hpp	/^	int MouseY;$/;"	m	class:NInput	access:private
NAELSTROF_BUTTON	NButton.hpp	10;"	d
NAELSTROF_CAMERA	NCamera.hpp	9;"	d
NAELSTROF_COLOR	NColor.hpp	10;"	d
NAELSTROF_CONFIG	NConfig.hpp	9;"	d
NAELSTROF_ENGINE	NEngine.hpp	44;"	d
NAELSTROF_FILE_SYSTEM	NFileSystem.hpp	2;"	d
NAELSTROF_GAME	NGame.hpp	2;"	d
NAELSTROF_INPUT	NInput.hpp	10;"	d
NAELSTROF_LUA	NLua.hpp	9;"	d
NAELSTROF_MAP	NMap.hpp	9;"	d
NAELSTROF_NODE	NNode.hpp	10;"	d
NAELSTROF_PHYSICS	NPhysics.hpp	2;"	d
NAELSTROF_RENDER	NRender.hpp	9;"	d
NAELSTROF_SCENE	NScene.hpp	9;"	d
NAELSTROF_SHADER	NShader.hpp	9;"	d
NAELSTROF_SOUND	NSound.hpp	9;"	d
NAELSTROF_TEXT	NText.hpp	9;"	d
NAELSTROF_TEXTURE	NTexture.hpp	9;"	d
NAELSTROF_UNICODE	NUnicode.hpp	10;"	d
NAELSTROF_WINDOW	NWindow.hpp	10;"	d
NAnimation	NTexture.cpp	/^NAnimation::NAnimation()$/;"	f	class:NAnimation
NAnimation	NTexture.hpp	/^class NAnimation$/;"	c
NButton	NButton.cpp	/^NButton::NButton()$/;"	f	class:NButton
NButton	NButton.hpp	/^class NButton : public NNode$/;"	c
NCachedTexture	NRender.cpp	/^NCachedTexture::NCachedTexture(std::string i_Name)$/;"	f	class:NCachedTexture
NCachedTexture	NRender.cpp	/^NCachedTexture::NCachedTexture(std::string i_Name, GLuint i_ID)$/;"	f	class:NCachedTexture
NCachedTexture	NRender.hpp	/^class NCachedTexture$/;"	c
NCamera	NCamera.cpp	/^NCamera::NCamera()$/;"	f	class:NCamera
NCamera	NCamera.hpp	/^class NCamera : public NNode$/;"	c
NConfig	NConfig.cpp	/^NConfig::NConfig(std::string i_File)$/;"	f	class:NConfig	signature:(std::string i_File)
NConfig	NConfig.hpp	/^	NConfig(std::string i_File);$/;"	p	class:NConfig	access:public	signature:(std::string i_File)
NConfig	NConfig.hpp	/^class NConfig$/;"	c
NConfig::File	NConfig.hpp	/^	std::string File;$/;"	m	class:NConfig	access:private
NConfig::GetBool	NConfig.cpp	/^bool NConfig::GetBool(std::string Name)$/;"	f	class:NConfig	signature:(std::string Name)
NConfig::GetBool	NConfig.hpp	/^	bool GetBool(std::string Name);$/;"	p	class:NConfig	access:public	signature:(std::string Name)
NConfig::GetFloat	NConfig.cpp	/^float NConfig::GetFloat(std::string Name)$/;"	f	class:NConfig	signature:(std::string Name)
NConfig::GetFloat	NConfig.hpp	/^	float GetFloat(std::string Name);$/;"	p	class:NConfig	access:public	signature:(std::string Name)
NConfig::GetString	NConfig.cpp	/^std::string NConfig::GetString(std::string Name)$/;"	f	class:NConfig	signature:(std::string Name)
NConfig::GetString	NConfig.hpp	/^	std::string GetString(std::string Name);$/;"	p	class:NConfig	access:public	signature:(std::string Name)
NConfig::NConfig	NConfig.cpp	/^NConfig::NConfig(std::string i_File)$/;"	f	class:NConfig	signature:(std::string i_File)
NConfig::NConfig	NConfig.hpp	/^	NConfig(std::string i_File);$/;"	p	class:NConfig	access:public	signature:(std::string i_File)
NConfig::~NConfig	NConfig.cpp	/^NConfig::~NConfig()$/;"	f	class:NConfig	signature:()
NConfig::~NConfig	NConfig.hpp	/^	~NConfig();$/;"	p	class:NConfig	access:public	signature:()
NFace	NText.cpp	/^NFace::NFace(std::wstring i_Name)$/;"	f	class:NFace
NFace	NText.hpp	/^class NFace$/;"	c
NFile	NFileSystem.cpp	/^NFile::NFile(std::string i_File)$/;"	f	class:NFile
NFile	NFileSystem.hpp	/^class NFile$/;"	c
NFileSystem	NFileSystem.cpp	/^NFileSystem::NFileSystem(char* CurrentPath)$/;"	f	class:NFileSystem
NFileSystem	NFileSystem.hpp	/^class NFileSystem$/;"	c
NGame	NGame.cpp	/^NGame::NGame()$/;"	f	class:NGame
NGame	NGame.hpp	/^class NGame$/;"	c
NGlyph	NText.cpp	/^NGlyph::NGlyph(FT_Face Face)$/;"	f	class:NGlyph
NGlyph	NText.hpp	/^class NGlyph$/;"	c
NInput	NInput.hpp	/^class NInput$/;"	c
NInput::GetKey	NInput.hpp	/^	int GetKey(int Key);$/;"	p	class:NInput	access:public	signature:(int Key)
NInput::GetMouse	NInput.hpp	/^	glm::vec2 GetMouse();$/;"	p	class:NInput	access:public	signature:()
NInput::GetMouseKey	NInput.hpp	/^	int GetMouseKey(int Key);$/;"	p	class:NInput	access:public	signature:(int Key)
NInput::GetMouseX	NInput.hpp	/^	int GetMouseX();$/;"	p	class:NInput	access:public	signature:()
NInput::GetMouseY	NInput.hpp	/^	int GetMouseY();$/;"	p	class:NInput	access:public	signature:()
NInput::KeyChanged	NInput.hpp	/^	bool KeyChanged(int Key);$/;"	p	class:NInput	access:public	signature:(int Key)
NInput::Keys	NInput.hpp	/^	int Keys[128];$/;"	m	class:NInput	access:private
NInput::MouseX	NInput.hpp	/^	int MouseX;$/;"	m	class:NInput	access:private
NInput::MouseY	NInput.hpp	/^	int MouseY;$/;"	m	class:NInput	access:private
NInput::Poll	NInput.hpp	/^	void Poll();$/;"	p	class:NInput	access:public	signature:()
NLua	NLua.cpp	/^NLua::NLua()$/;"	f	class:NLua
NLua	NLua.hpp	/^	NLua();$/;"	p	class:NLua	access:public	signature:()
NLua	NLua.hpp	/^class NLua$/;"	c
NLua::DoFile	NLua.hpp	/^	bool DoFile(std::string File);$/;"	p	class:NLua	access:public	signature:(std::string File)
NLua::DoFolder	NLua.hpp	/^	bool DoFolder(std::string Folder);$/;"	p	class:NLua	access:public	signature:(std::string Folder)
NLua::GetL	NLua.hpp	/^	lua_State* GetL();$/;"	p	class:NLua	access:public	signature:()
NLua::L	NLua.hpp	/^	lua_State* L;$/;"	m	class:NLua	access:private
NLua::NLua	NLua.hpp	/^	NLua();$/;"	p	class:NLua	access:public	signature:()
NLua::~NLua	NLua.hpp	/^	~NLua();$/;"	p	class:NLua	access:public	signature:()
NMap	NMap.cpp	/^NMap::NMap(std::string i_TileSet)$/;"	f	class:NMap
NMap	NMap.hpp	/^class NMap : public NNode$/;"	c
NNode	NNode.cpp	/^NNode::NNode()$/;"	f	class:NNode	signature:()
NNode	NNode.hpp	/^class NNode$/;"	c
NNode::AddChild	NNode.cpp	/^void NNode::AddChild(NNode* Node)$/;"	f	class:NNode	signature:(NNode* Node)
NNode::Draw	NNode.cpp	/^void NNode::Draw(glm::mat4 View) {}$/;"	f	class:NNode	signature:(glm::mat4 View)
NNode::GetAng	NNode.cpp	/^float NNode::GetAng()$/;"	f	class:NNode	signature:()
NNode::GetColor	NNode.cpp	/^glm::vec4 NNode::GetColor()$/;"	f	class:NNode	signature:()
NNode::GetModelMatrix	NNode.cpp	/^glm::mat4 NNode::GetModelMatrix()$/;"	f	class:NNode	signature:()
NNode::GetNonScaleMatrix	NNode.cpp	/^glm::mat4 NNode::GetNonScaleMatrix()$/;"	f	class:NNode	signature:()
NNode::GetParent	NNode.cpp	/^NNode* NNode::GetParent()$/;"	f	class:NNode	signature:()
NNode::GetPos	NNode.cpp	/^glm::vec2 NNode::GetPos()$/;"	f	class:NNode	signature:()
NNode::GetScale	NNode.cpp	/^glm::vec2 NNode::GetScale()$/;"	f	class:NNode	signature:()
NNode::NNode	NNode.cpp	/^NNode::NNode()$/;"	f	class:NNode	signature:()
NNode::RemoveChild	NNode.cpp	/^void NNode::RemoveChild(NNode* Node)$/;"	f	class:NNode	signature:(NNode* Node)
NNode::SetAng	NNode.cpp	/^void NNode::SetAng(float i_Angle)$/;"	f	class:NNode	signature:(float i_Angle)
NNode::SetColor	NNode.cpp	/^void NNode::SetColor(float R, float G, float B)$/;"	f	class:NNode	signature:(float R, float G, float B)
NNode::SetColor	NNode.cpp	/^void NNode::SetColor(float R, float G, float B, float A)$/;"	f	class:NNode	signature:(float R, float G, float B, float A)
NNode::SetColor	NNode.cpp	/^void NNode::SetColor(glm::vec3 i_Color)$/;"	f	class:NNode	signature:(glm::vec3 i_Color)
NNode::SetColor	NNode.cpp	/^void NNode::SetColor(glm::vec4 i_Color)$/;"	f	class:NNode	signature:(glm::vec4 i_Color)
NNode::SetParent	NNode.cpp	/^void NNode::SetParent(NNode* Node)$/;"	f	class:NNode	signature:(NNode* Node)
NNode::SetPos	NNode.cpp	/^void NNode::SetPos(float X, float Y)$/;"	f	class:NNode	signature:(float X, float Y)
NNode::SetPos	NNode.cpp	/^void NNode::SetPos(glm::vec2 i_Position)$/;"	f	class:NNode	signature:(glm::vec2 i_Position)
NNode::SetScale	NNode.cpp	/^void NNode::SetScale(float W, float H)$/;"	f	class:NNode	signature:(float W, float H)
NNode::SetScale	NNode.cpp	/^void NNode::SetScale(float i_Scale)$/;"	f	class:NNode	signature:(float i_Scale)
NNode::SetScale	NNode.cpp	/^void NNode::SetScale(glm::vec2 i_Scale)$/;"	f	class:NNode	signature:(glm::vec2 i_Scale)
NNode::SwapDepth	NNode.cpp	/^void NNode::SwapDepth(unsigned int Depth)$/;"	f	class:NNode	signature:(unsigned int Depth)
NNode::Tick	NNode.cpp	/^void NNode::Tick(double DT) {}$/;"	f	class:NNode	signature:(double DT)
NNode::UpdateMatrix	NNode.cpp	/^void NNode::UpdateMatrix()$/;"	f	class:NNode	signature:()
NNode::~NNode	NNode.cpp	/^NNode::~NNode()$/;"	f	class:NNode	signature:()
NRender	NRender.cpp	/^NRender::NRender()$/;"	f	class:NRender
NRender	NRender.hpp	/^class NRender$/;"	c
NScene	NScene.cpp	/^NScene::NScene()$/;"	f	class:NScene
NScene	NScene.hpp	/^class NScene$/;"	c
NShader	NShader.cpp	/^NShader::NShader(std::string i_Name)$/;"	f	class:NShader
NShader	NShader.hpp	/^	NShader(std::string Name);$/;"	p	class:NShader	access:public	signature:(std::string Name)
NShader	NShader.hpp	/^class NShader$/;"	c
NShader::GetID	NShader.hpp	/^	GLuint GetID();$/;"	p	class:NShader	access:public	signature:()
NShader::GetName	NShader.hpp	/^	std::string GetName();$/;"	p	class:NShader	access:public	signature:()
NShader::GetUniformLocation	NShader.hpp	/^	GLuint GetUniformLocation(std::string i_Name);$/;"	p	class:NShader	access:public	signature:(std::string i_Name)
NShader::Load	NShader.hpp	/^	bool Load(std::string VertexShaderPath,std::string FragmentShaderPath);$/;"	p	class:NShader	access:public	signature:(std::string VertexShaderPath,std::string FragmentShaderPath)
NShader::NShader	NShader.hpp	/^	NShader(std::string Name);$/;"	p	class:NShader	access:public	signature:(std::string Name)
NShader::Name	NShader.hpp	/^	std::string Name;$/;"	m	class:NShader	access:private
NShader::ProgramID	NShader.hpp	/^	GLuint ProgramID;$/;"	m	class:NShader	access:private
NShader::Uniforms	NShader.hpp	/^	std::vector<NUniform*> Uniforms;$/;"	m	class:NShader	access:private
NShader::~NShader	NShader.hpp	/^	~NShader();$/;"	p	class:NShader	access:public	signature:()
NSound	NSound.cpp	/^NSound::NSound(std::string Name)$/;"	f	class:NSound
NSound	NSound.hpp	/^class NSound : public NNode$/;"	c
NSoundData	NSound.cpp	/^NSoundData::NSoundData(std::string i_Name)$/;"	f	class:NSoundData
NSoundData	NSound.hpp	/^class NSoundData$/;"	c
NSoundSystem	NSound.cpp	/^NSoundSystem::NSoundSystem()$/;"	f	class:NSoundSystem
NSoundSystem	NSound.hpp	/^class NSoundSystem$/;"	c
NText	NText.cpp	/^NText::NText(std::wstring i_Face, std::wstring i_Data) : NNode()$/;"	f	class:NText
NText	NText.hpp	/^class NText : public NNode$/;"	c
NTextSystem	NText.cpp	/^NTextSystem::NTextSystem()$/;"	f	class:NTextSystem
NTextSystem	NText.hpp	/^class NTextSystem$/;"	c
NTexture	NTexture.cpp	/^NTexture::NTexture(NTexture* Texture)$/;"	f	class:NTexture
NTexture	NTexture.cpp	/^NTexture::NTexture(std::string i_Name)$/;"	f	class:NTexture
NTexture	NTexture.hpp	/^class NTexture$/;"	c
NTextureAtlas	NText.cpp	/^NTextureAtlas::NTextureAtlas(FT_Face Face, unsigned int i_Size)$/;"	f	class:NTextureAtlas
NTextureAtlas	NText.hpp	/^class NTextureAtlas$/;"	c
NTextureNode	NText.cpp	/^NTextureNode::NTextureNode(glm::vec4 i_Rect)$/;"	f	class:NTextureNode
NTextureNode	NText.hpp	/^class NTextureNode$/;"	c
NTile	NMap.cpp	/^NTile::NTile()$/;"	f	class:NTile
NTile	NMap.hpp	/^class NTile$/;"	c
NUniform	NShader.cpp	/^NUniform::NUniform(GLuint ProgramID, std::string i_Name)$/;"	f	class:NUniform
NUniform	NShader.hpp	/^	NUniform(GLuint ProgramID,std::string Name);$/;"	p	class:NUniform	access:public	signature:(GLuint ProgramID,std::string Name)
NUniform	NShader.hpp	/^class NUniform$/;"	c
NUniform::GetName	NShader.hpp	/^	std::string GetName();$/;"	p	class:NUniform	access:public	signature:()
NUniform::GetUniformLocation	NShader.hpp	/^	GLuint GetUniformLocation();$/;"	p	class:NUniform	access:public	signature:()
NUniform::NUniform	NShader.hpp	/^	NUniform(GLuint ProgramID,std::string Name);$/;"	p	class:NUniform	access:public	signature:(GLuint ProgramID,std::string Name)
NUniform::Name	NShader.hpp	/^	std::string Name;$/;"	m	class:NUniform	access:private
NUniform::UniLoc	NShader.hpp	/^	GLuint UniLoc;$/;"	m	class:NUniform	access:private
NUniform::~NUniform	NShader.hpp	/^	~NUniform();$/;"	p	class:NUniform	access:public	signature:()
NWindow	NWindow.cpp	/^NWindow::NWindow()$/;"	f	class:NWindow
NWindow	NWindow.hpp	/^	NWindow();$/;"	p	class:NWindow	access:public	signature:()
NWindow	NWindow.hpp	/^class NWindow : public NNode$/;"	c	inherits:NNode
NWindow::BorderSize	NWindow.hpp	/^	float BorderSize;$/;"	m	class:NWindow	access:private
NWindow::Buffers	NWindow.hpp	/^	GLuint* Buffers;$/;"	m	class:NWindow	access:private
NWindow::Changed	NWindow.hpp	/^	bool Changed;$/;"	m	class:NWindow	access:private
NWindow::ColorLoc	NWindow.hpp	/^	GLuint ColorLoc;$/;"	m	class:NWindow	access:private
NWindow::Draw	NWindow.hpp	/^	void Draw(glm::mat4 View);$/;"	p	class:NWindow	access:public	signature:(glm::mat4 View)
NWindow::GenerateBuffers	NWindow.hpp	/^	void GenerateBuffers();$/;"	p	class:NWindow	access:private	signature:()
NWindow::MatrixLoc	NWindow.hpp	/^	GLuint MatrixLoc;$/;"	m	class:NWindow	access:private
NWindow::NWindow	NWindow.hpp	/^	NWindow();$/;"	p	class:NWindow	access:public	signature:()
NWindow::ScreenLoc	NWindow.hpp	/^	GLuint ScreenLoc;$/;"	m	class:NWindow	access:private
NWindow::SetTexture	NWindow.hpp	/^	void SetTexture(std::string Name);$/;"	p	class:NWindow	access:public	signature:(std::string Name)
NWindow::Shader	NWindow.hpp	/^	NShader* Shader;$/;"	m	class:NWindow	access:private
NWindow::SizeMem	NWindow.hpp	/^	glm::vec2 SizeMem;$/;"	m	class:NWindow	access:private
NWindow::Texture	NWindow.hpp	/^	NTexture* Texture;$/;"	m	class:NWindow	access:public
NWindow::TextureLoc	NWindow.hpp	/^	GLuint TextureLoc;$/;"	m	class:NWindow	access:private
NWindow::Tick	NWindow.hpp	/^	void Tick(double DT);$/;"	p	class:NWindow	access:public	signature:(double DT)
NWindow::UVs	NWindow.hpp	/^	std::vector<glm::vec2> UVs;$/;"	m	class:NWindow	access:private
NWindow::Verts	NWindow.hpp	/^	std::vector<glm::vec2> Verts;$/;"	m	class:NWindow	access:private
NWindow::~NWindow	NWindow.hpp	/^	~NWindow();$/;"	p	class:NWindow	access:public	signature:()
Name	NRender.hpp	/^	std::string Name;$/;"	m	class:NCachedTexture
Name	NShader.hpp	/^	std::string Name;$/;"	m	class:NShader	access:private
Name	NShader.hpp	/^	std::string Name;$/;"	m	class:NUniform	access:private
Name	NSound.hpp	/^    std::string Name;$/;"	m	class:NSoundData
Name	NText.hpp	/^	std::wstring Name;$/;"	m	class:NFace
Name	NTexture.hpp	/^	std::string Name;$/;"	m	class:NAnimation
Name	NTexture.hpp	/^	std::string Name;$/;"	m	class:NTexture
NewHeight	NGame.hpp	/^	int NewHeight;$/;"	m	class:NGame
NewWidth	NGame.hpp	/^	int NewWidth;$/;"	m	class:NGame
Node	NText.hpp	/^	NTextureNode* Node;$/;"	m	class:NTextureAtlas
Nodes	NScene.hpp	/^	std::vector<NNode*> Nodes;$/;"	m	class:NScene
Number	NConfig.cpp	/^	float Number = lua_tonumber(L,-1);$/;"	l
OnPressed	NButton.cpp	/^bool NButton::OnPressed()$/;"	f	class:NButton
OnRelease	NButton.cpp	/^bool NButton::OnRelease()$/;"	f	class:NButton
OrthoMatrix	NCamera.hpp	/^	glm::mat4 OrthoMatrix;$/;"	m	class:NCamera
PACKAGE_BUGREPORT	config.h	44;"	d
PACKAGE_NAME	config.h	47;"	d
PACKAGE_STRING	config.h	50;"	d
PACKAGE_TARNAME	config.h	53;"	d
PACKAGE_URL	config.h	56;"	d
PACKAGE_VERSION	config.h	59;"	d
Parent	NNode.hpp	/^	NNode* Parent;$/;"	m	class:NNode
Parent	NText.hpp	/^	NTextureNode* Parent;$/;"	m	class:NTextureNode
PerspMatrix	NCamera.hpp	/^	glm::mat4 PerspMatrix;$/;"	m	class:NCamera
PerspViewMatrix	NCamera.hpp	/^	glm::mat4 PerspViewMatrix;$/;"	m	class:NCamera
Play	NSound.cpp	/^void NSound::Play()$/;"	f	class:NSound
Play	NTexture.cpp	/^void NTexture::Play(std::string i_Name)$/;"	f	class:NTexture
PlayingAnimation	NTexture.hpp	/^	unsigned int PlayingAnimation;$/;"	m	class:NTexture
Poll	NGame.cpp	/^void NGame::Poll()$/;"	f	class:NGame
Poll	NInput.cpp	/^void NInput::Poll()$/;"	f	class:NInput
Poll	NInput.hpp	/^	void Poll();$/;"	p	class:NInput	access:public	signature:()
Pos	NNode.cpp	/^	glm::mat4 Pos = glm::translate(glm::mat4(),glm::vec3(Position,0));$/;"	l
Position	NNode.hpp	/^	glm::vec3 Position;$/;"	m	class:NNode
PressedMemory	NButton.hpp	/^	bool PressedMemory;$/;"	m	class:NButton
ProgramID	NShader.hpp	/^	GLuint ProgramID;$/;"	m	class:NShader	access:private
Rand	NEngine.cpp	/^float Rand(float Min, float Max)$/;"	f	signature:(float Min, float Max)
Read	NFileSystem.cpp	/^unsigned int NFile::Read(void* Buffer, unsigned int Size)$/;"	f	class:NFile
Rect	NText.hpp	/^	glm::vec4 Rect;$/;"	m	class:NTextureNode
Red	NColor.hpp	12;"	d
Reference	NTexture.hpp	/^	int Reference;$/;"	m	class:NAnimation
Remove	NButton.cpp	/^void NButton::Remove()$/;"	f	class:NButton
Remove	NMap.cpp	/^void NMap::Remove()$/;"	f	class:NMap
Remove	NSound.cpp	/^void NSound::Remove()$/;"	f	class:NSound
Remove	NText.cpp	/^void NText::Remove()$/;"	f	class:NText
Remove	NWindow.cpp	/^void NWindow::Remove()$/;"	f	class:NWindow
RemoveChild	NNode.cpp	/^		Parent->RemoveChild(this);$/;"	p	file:	signature:(this)
RemoveChild	NNode.cpp	/^void NNode::RemoveChild(NNode* Node)$/;"	f	class:NNode	signature:(NNode* Node)
Render	NGame.hpp	/^	NRender* Render;$/;"	m	class:NGame
Rendered	NText.hpp	/^	bool Rendered;$/;"	m	class:NGlyph
ResizeWindow	NGame.cpp	/^void ResizeWindow(int W, int H)$/;"	f
ReturnBool	NConfig.cpp	/^	bool ReturnBool = (bool)lua_toboolean(L,-1);$/;"	l
ReturnString	NConfig.cpp	/^	std::string ReturnString = Text;$/;"	l
Run	NGame.hpp	/^	bool Run;$/;"	m	class:NGame
Running	NGame.cpp	/^bool NGame::Running()$/;"	f	class:NGame
SMatrix	NNode.hpp	/^	glm::mat4 SMatrix;$/;"	m	class:NNode
STDC_HEADERS	config.h	62;"	d
Sca	NNode.cpp	/^	glm::mat4 Sca = glm::scale(glm::mat4(),glm::vec3(Scale,1));$/;"	l
Scale	NNode.hpp	/^	glm::vec3 Scale;$/;"	m	class:NNode
Scene	NGame.hpp	/^	NScene* Scene;$/;"	m	class:NGame
ScreenLoc	NButton.hpp	/^	GLuint ScreenLoc;$/;"	m	class:NButton
ScreenLoc	NText.hpp	/^	GLuint ColorLoc,TextureLoc,MatrixLoc,ScreenLoc;$/;"	m	class:NText
ScreenLoc	NWindow.hpp	/^	GLuint ScreenLoc;$/;"	m	class:NWindow	access:private
Seek	NFileSystem.cpp	/^void NFile::Seek(unsigned int Pos)$/;"	f	class:NFile
SetAng	NCamera.cpp	/^void NCamera::SetAng(glm::vec3 i_Angle)$/;"	f	class:NCamera
SetAng	NNode.cpp	/^void NNode::SetAng(float i_Angle)$/;"	f	class:NNode	signature:(float i_Angle)
SetCamera	NRender.cpp	/^void NRender::SetCamera(NCamera* i_Camera)$/;"	f	class:NRender
SetColor	NColor.cpp	/^void SetColor(unsigned int Color) {}$/;"	f	signature:(unsigned int Color)
SetColor	NColor.cpp	/^void SetColor(unsigned int Color)$/;"	f	signature:(unsigned int Color)
SetColor	NColor.hpp	/^void SetColor(unsigned int Color);$/;"	p	signature:(unsigned int Color)
SetColor	NNode.cpp	/^void NNode::SetColor(float R, float G, float B)$/;"	f	class:NNode	signature:(float R, float G, float B)
SetColor	NNode.cpp	/^void NNode::SetColor(float R, float G, float B, float A)$/;"	f	class:NNode	signature:(float R, float G, float B, float A)
SetColor	NNode.cpp	/^void NNode::SetColor(glm::vec3 i_Color)$/;"	f	class:NNode	signature:(glm::vec3 i_Color)
SetColor	NNode.cpp	/^void NNode::SetColor(glm::vec4 i_Color)$/;"	f	class:NNode	signature:(glm::vec4 i_Color)
SetFilter	NRender.cpp	/^void NCachedTexture::SetFilter(GLuint Filter)$/;"	f	class:NCachedTexture
SetMode	NText.cpp	/^void NText::SetMode(int i_Mode)$/;"	f	class:NText
SetName	NTexture.cpp	/^void NAnimation::SetName(std::string i_Name)$/;"	f	class:NAnimation
SetParent	NNode.cpp	/^			Children[i]->SetParent(NULL);$/;"	p	file:	signature:(NULL)
SetParent	NNode.cpp	/^void NNode::SetParent(NNode* Node)$/;"	f	class:NNode	signature:(NNode* Node)
SetPos	NCamera.cpp	/^void NCamera::SetPos(glm::vec3 i_Position)$/;"	f	class:NCamera
SetPos	NNode.cpp	/^void NNode::SetPos(float X, float Y)$/;"	f	class:NNode	signature:(float X, float Y)
SetPos	NNode.cpp	/^void NNode::SetPos(glm::vec2 i_Position)$/;"	f	class:NNode	signature:(glm::vec2 i_Position)
SetScale	NCamera.cpp	/^void NCamera::SetScale(glm::vec3 i_Scale)$/;"	f	class:NCamera
SetScale	NNode.cpp	/^void NNode::SetScale(float W, float H)$/;"	f	class:NNode	signature:(float W, float H)
SetScale	NNode.cpp	/^void NNode::SetScale(float i_Scale)$/;"	f	class:NNode	signature:(float i_Scale)
SetScale	NNode.cpp	/^void NNode::SetScale(glm::vec2 i_Scale)$/;"	f	class:NNode	signature:(glm::vec2 i_Scale)
SetSize	NRender.cpp	/^void NRender::SetSize(float Width, float Height)$/;"	f	class:NRender
SetSize	NRender.cpp	/^void NRender::SetSize(glm::vec2 i_Size)$/;"	f	class:NRender
SetSize	NText.cpp	/^void NText::SetSize(float i_Size)$/;"	f	class:NText
SetText	NButton.cpp	/^void NButton::SetText(std::wstring Text)$/;"	f	class:NButton
SetText	NText.cpp	/^void NText::SetText(std::string i_Data)$/;"	f	class:NText
SetText	NText.cpp	/^void NText::SetText(std::wstring i_Data)$/;"	f	class:NText
SetTexture	NButton.cpp	/^void NButton::SetTexture(std::string Name)$/;"	f	class:NButton
SetTexture	NWindow.cpp	/^void NWindow::SetTexture(std::string Name)$/;"	f	class:NWindow
SetTexture	NWindow.hpp	/^	void SetTexture(std::string Name);$/;"	p	class:NWindow	access:public	signature:(std::string Name)
SetTextureFilter	NRender.cpp	/^void NRender::SetTextureFilter(GLuint Filter)$/;"	f	class:NRender
SetVSync	NRender.cpp	/^void NRender::SetVSync(bool i_VSync)$/;"	f	class:NRender
SetWindowChanged	NGame.cpp	/^void NGame::SetWindowChanged(bool Changed)$/;"	f	class:NGame
SetWindowSize	NGame.cpp	/^void NGame::SetWindowSize(int W, int H)$/;"	f	class:NGame
Shader	NButton.hpp	/^	NShader* Shader;$/;"	m	class:NButton
Shader	NMap.hpp	/^	NShader* Shader;$/;"	m	class:NMap
Shader	NText.hpp	/^	NShader* Shader;$/;"	m	class:NText
Shader	NWindow.hpp	/^	NShader* Shader;$/;"	m	class:NWindow	access:private
Shaders	NRender.hpp	/^	std::vector<NShader*> Shaders;$/;"	m	class:NRender
Size	NFileSystem.cpp	/^unsigned int NFile::Size()$/;"	f	class:NFile
Size	NRender.hpp	/^	glm::vec2 Size;$/;"	m	class:NRender
Size	NText.hpp	/^	float Size;$/;"	m	class:NText
Size	NText.hpp	/^	int Size;$/;"	m	class:NTextureAtlas
SizeMem	NWindow.hpp	/^	glm::vec2 SizeMem;$/;"	m	class:NWindow	access:private
SoundData	NSound.hpp	/^    std::vector<NSoundData*> SoundData;$/;"	m	class:NSoundSystem
SoundSystem	NGame.hpp	/^	NSoundSystem* SoundSystem;$/;"	m	class:NGame
Success	NEngine.hpp	76;"	d
SwapDepth	NNode.cpp	/^void NNode::SwapDepth(unsigned int Depth)$/;"	f	class:NNode	signature:(unsigned int Depth)
Text	NConfig.cpp	/^	const char* Text = lua_tostring(L,-1);$/;"	l
TextSystem	NGame.hpp	/^	NTextSystem* TextSystem;$/;"	m	class:NGame
Texture	NButton.hpp	/^	NTexture* Texture;$/;"	m	class:NButton
Texture	NMap.hpp	/^	NTexture* Texture;$/;"	m	class:NMap
Texture	NText.hpp	/^	GLuint Texture;$/;"	m	class:NTextureAtlas
Texture	NWindow.hpp	/^	NTexture* Texture;$/;"	m	class:NWindow	access:public
TextureFilter	NRender.hpp	/^	GLuint TextureFilter;$/;"	m	class:NRender
TextureHeight	NMap.hpp	/^	unsigned int TextureHeight;$/;"	m	class:NMap
TextureLoc	NButton.hpp	/^	GLuint TextureLoc;$/;"	m	class:NButton
TextureLoc	NMap.hpp	/^	GLuint ColorLoc, MatrixLoc, TextureLoc;$/;"	m	class:NMap
TextureLoc	NText.hpp	/^	GLuint ColorLoc,TextureLoc,MatrixLoc,ScreenLoc;$/;"	m	class:NText
TextureLoc	NWindow.hpp	/^	GLuint TextureLoc;$/;"	m	class:NWindow	access:private
TextureRect	NText.hpp	/^	glm::vec4 TextureRect;$/;"	m	class:NGlyph
TextureWidth	NMap.hpp	/^	unsigned int TextureWidth;$/;"	m	class:NMap
Textures	NRender.hpp	/^	std::vector<NTexture*> Textures;$/;"	m	class:NRender
Textures	NText.hpp	/^	std::vector<NTextureAtlas*> Textures;$/;"	m	class:NFace
Tick	NButton.cpp	/^void NButton::Tick(double DT)$/;"	f	class:NButton
Tick	NMap.cpp	/^void NMap::Tick(double DT)$/;"	f	class:NMap
Tick	NNode.cpp	/^void NNode::Tick(double DT) {}$/;"	f	class:NNode	signature:(double DT)
Tick	NScene.cpp	/^void NScene::Tick()$/;"	f	class:NScene
Tick	NTexture.cpp	/^void NTexture::Tick(double DT)$/;"	f	class:NTexture
Tick	NWindow.cpp	/^void NWindow::Tick(double DT)$/;"	f	class:NWindow
Tick	NWindow.hpp	/^	void Tick(double DT);$/;"	p	class:NWindow	access:public	signature:(double DT)
TileSize	NMap.hpp	/^	float TileSize;$/;"	m	class:NMap
Tiles	NMap.hpp	/^	std::vector<std::vector<std::vector<NTile* > > > Tiles;$/;"	m	class:NMap
ToMBS	NUnicode.cpp	/^std::string ToMBS(std::wstring WideString)$/;"	f
UNICODE	NUnicode.hpp	16;"	d
UVs	NButton.hpp	/^	std::vector<glm::vec2> UVs;$/;"	m	class:NButton
UVs	NMap.hpp	/^	std::vector<std::vector<glm::vec2> > UVs;$/;"	m	class:NMap
UVs	NText.hpp	/^	std::vector<glm::vec2> UVs;$/;"	m	class:NText
UVs	NWindow.hpp	/^	std::vector<glm::vec2> UVs;$/;"	m	class:NWindow	access:private
UniLoc	NShader.hpp	/^	GLuint UniLoc;$/;"	m	class:NUniform	access:private
Uniforms	NShader.hpp	/^	std::vector<NUniform*> Uniforms;$/;"	m	class:NShader	access:private
UpdateMatrix	NCamera.cpp	/^void NCamera::UpdateMatrix()$/;"	f	class:NCamera
UpdateMatrix	NNode.cpp	/^			Children[i]->UpdateMatrix();$/;"	p	file:	signature:()
UpdateMatrix	NNode.cpp	/^		Children[i]->UpdateMatrix();$/;"	p	file:	signature:()
UpdateMatrix	NNode.cpp	/^void NNode::UpdateMatrix()$/;"	f	class:NNode	signature:()
UpdateMipmaps	NText.cpp	/^void NFace::UpdateMipmaps()$/;"	f	class:NFace
UpdateMipmaps	NText.cpp	/^void NTextureAtlas::UpdateMipmaps()$/;"	f	class:NTextureAtlas
VSync	NRender.hpp	/^	bool VSync;$/;"	m	class:NRender
Valid	NGame.hpp	/^	bool Valid;$/;"	m	class:NGame
Velocity	NText.hpp	/^	glm::vec2 Velocity;$/;"	m	class:NText
Verts	NButton.hpp	/^	std::vector<glm::vec2> Verts;$/;"	m	class:NButton
Verts	NMap.hpp	/^	std::vector<std::vector<glm::vec3> > Verts;$/;"	m	class:NMap
Verts	NText.hpp	/^	std::vector<glm::vec2> Verts;$/;"	m	class:NText
Verts	NWindow.hpp	/^	std::vector<glm::vec2> Verts;$/;"	m	class:NWindow	access:private
ViewMatrix	NCamera.hpp	/^	glm::mat4 ViewMatrix;$/;"	m	class:NCamera
Width	NGame.hpp	/^	int Width;$/;"	m	class:NGame
Width	NMap.hpp	/^	unsigned int Width,Height,Depth;$/;"	m	class:NMap
Width	NRender.hpp	/^	int Width, Height;$/;"	m	class:NCachedTexture
Width	NText.hpp	/^	float Width;$/;"	m	class:NText
Width	NText.hpp	/^	int Width, Height;$/;"	m	class:NTextureAtlas
WindowChanged	NGame.hpp	/^	bool WindowChanged;$/;"	m	class:NGame
X	NEngine.cpp	/^	float X = (float(rand())\/float(RAND_MAX))*Difference;$/;"	l
Yellow	NColor.hpp	14;"	d
Zoom	NCamera.hpp	/^	float Zoom;$/;"	m	class:NCamera
_MBCS	NUnicode.hpp	18;"	d
_T	NUnicode.hpp	19;"	d
_UNICODE	NUnicode.hpp	15;"	d
as_fn_append	config.status	/^  as_fn_append ()$/;"	f
as_fn_arith	config.status	/^  as_fn_arith ()$/;"	f
as_fn_error	config.status	/^as_fn_error ()$/;"	f
as_fn_exit	config.status	/^as_fn_exit ()$/;"	f
as_fn_mkdir_p	config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_set_status	config.status	/^as_fn_set_status ()$/;"	f
as_fn_unset	config.status	/^as_fn_unset ()$/;"	f
bindir	Makefile	/^bindir         	= ${exec_prefix}\/bin$/;"	m
cout	NColor.cpp	/^	std::cout << "\\e[0m";$/;"	m	class:std	file:
cout	NConfig.cpp	/^		std::cout << "CONFIG WARN: ";$/;"	m	class:std	file:
distdir	Makefile	/^distdir        	= $(tarname)-$(version)$/;"	m
erase	NNode.cpp	/^			Children.erase(Children.begin()+i);$/;"	p	file:	signature:(Children.begin()+i)
exec_prefix	Makefile	/^exec_prefix    	= ${prefix}$/;"	m
glError	NRender.cpp	/^void NRender::glError()$/;"	f	class:NRender
lua_checkAnimation	NTexture.cpp	/^NAnimation* lua_checkAnimation(lua_State* L, int narg)$/;"	f
lua_pushAnimation	NTexture.cpp	/^void lua_pushAnimation(lua_State* L, NAnimation* Animation)$/;"	f
lua_toAnimation	NTexture.cpp	/^NAnimation* lua_toAnimation(lua_State* L, int index)$/;"	f
main	main.cpp	/^int main(int argc, char* argv[])$/;"	f
objects	Makefile	/^objects			= NGame.o NColor.o NEngine.o NInput.o NCamera.o NNode.o NScene.o NRender.o NShader.o NText.o NTexture.o NLua.o NConfig.o NWindow.o NButton.o NPhysics.o$/;"	m
package	Makefile	/^package        	= astrostruct$/;"	m
prefix	Makefile	/^prefix         	= \/usr\/local$/;"	m
push_back	NNode.cpp	/^	Children.push_back(Node);$/;"	p	file:	signature:(Node)
srcdir	Makefile	/^srcdir			= .$/;"	m
std::cout	NColor.cpp	/^	std::cout << "\\e[0m";$/;"	m	class:std	file:
std::cout	NConfig.cpp	/^		std::cout << "CONFIG WARN: ";$/;"	m	class:std	file:
tarname	Makefile	/^tarname        	= astrostruct$/;"	m
vec2	NNode.cpp	/^	SetScale(glm::vec2(W,H));$/;"	p	file:	signature:(W,H)
vec2	NNode.cpp	/^	SetScale(glm::vec2(i_Scale));$/;"	p	file:	signature:(i_Scale)
version	Makefile	/^version        	= 1.0$/;"	m
~NAnimation	NTexture.cpp	/^NAnimation::~NAnimation()$/;"	f	class:NAnimation
~NButton	NButton.cpp	/^NButton::~NButton()$/;"	f	class:NButton
~NCachedTexture	NRender.cpp	/^NCachedTexture::~NCachedTexture()$/;"	f	class:NCachedTexture
~NConfig	NConfig.cpp	/^NConfig::~NConfig()$/;"	f	class:NConfig	signature:()
~NConfig	NConfig.hpp	/^	~NConfig();$/;"	p	class:NConfig	access:public	signature:()
~NFace	NText.cpp	/^NFace::~NFace()$/;"	f	class:NFace
~NFile	NFileSystem.cpp	/^NFile::~NFile()$/;"	f	class:NFile
~NFileSystem	NFileSystem.cpp	/^NFileSystem::~NFileSystem()$/;"	f	class:NFileSystem
~NGame	NGame.cpp	/^NGame::~NGame()$/;"	f	class:NGame
~NGlyph	NText.cpp	/^NGlyph::~NGlyph()$/;"	f	class:NGlyph
~NLua	NLua.cpp	/^NLua::~NLua()$/;"	f	class:NLua
~NLua	NLua.hpp	/^	~NLua();$/;"	p	class:NLua	access:public	signature:()
~NMap	NMap.cpp	/^NMap::~NMap()$/;"	f	class:NMap
~NNode	NNode.cpp	/^NNode::~NNode()$/;"	f	class:NNode	signature:()
~NRender	NRender.cpp	/^NRender::~NRender()$/;"	f	class:NRender
~NScene	NScene.cpp	/^NScene::~NScene()$/;"	f	class:NScene
~NShader	NShader.cpp	/^NShader::~NShader()$/;"	f	class:NShader
~NShader	NShader.hpp	/^	~NShader();$/;"	p	class:NShader	access:public	signature:()
~NSound	NSound.cpp	/^NSound::~NSound()$/;"	f	class:NSound
~NSoundData	NSound.cpp	/^NSoundData::~NSoundData()$/;"	f	class:NSoundData
~NSoundSystem	NSound.cpp	/^NSoundSystem::~NSoundSystem()$/;"	f	class:NSoundSystem
~NText	NText.cpp	/^NText::~NText()$/;"	f	class:NText
~NTextSystem	NText.cpp	/^NTextSystem::~NTextSystem()$/;"	f	class:NTextSystem
~NTexture	NTexture.cpp	/^NTexture::~NTexture()$/;"	f	class:NTexture
~NTextureAtlas	NText.cpp	/^NTextureAtlas::~NTextureAtlas()$/;"	f	class:NTextureAtlas
~NTile	NMap.cpp	/^NTile::~NTile()$/;"	f	class:NTile
~NUniform	NShader.cpp	/^NUniform::~NUniform()$/;"	f	class:NUniform
~NUniform	NShader.hpp	/^	~NUniform();$/;"	p	class:NUniform	access:public	signature:()
~NWindow	NWindow.cpp	/^NWindow::~NWindow()$/;"	f	class:NWindow
~NWindow	NWindow.hpp	/^	~NWindow();$/;"	p	class:NWindow	access:public	signature:()
