!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	NNode.cpp	/^	float A = Color.w;$/;"	l
AMax	NPhysics.cpp	/^	glm::vec2 AMax = glm::vec2(Box.x,Box.y)+glm::vec2(Box.z,Box.w)\/2.f;$/;"	l
AMin	NPhysics.cpp	/^	glm::vec2 AMin = glm::vec2(Box.x,Box.y)-glm::vec2(Box.z,Box.w)\/2.f;$/;"	l
AddAnimation	NTexture.cpp	/^void NTexture::AddAnimation(NAnimation* Animation)$/;"	f	class:NTexture	signature:(NAnimation* Animation)
AddAnimation	NTexture.hpp	/^	void AddAnimation(NAnimation* Animation);$/;"	p	class:NTexture	access:public	signature:(NAnimation* Animation)
AddButton	NScene.cpp	/^NButton* NScene::AddButton()$/;"	f	class:NScene
AddCachedAnimation	NRender.cpp	/^void NRender::AddCachedAnimation(NAnimation* Animation)$/;"	f	class:NRender
AddCachedTexture	NRender.cpp	/^void NRender::AddCachedTexture(GLuint Texture)$/;"	f	class:NRender
AddCachedTexture	NRender.hpp	/^	void AddCachedTexture(GLuint ID);$/;"	p	class:NRender	access:public	signature:(GLuint ID)
AddChild	NNode.cpp	/^	Parent->AddChild(this);$/;"	p	file:	signature:(this)
AddChild	NNode.cpp	/^void NNode::AddChild(NNode* Node)$/;"	f	class:NNode	signature:(NNode* Node)
AddChild	NNode.hpp	/^	virtual void AddChild(NNode*);$/;"	p	class:NNode	access:public	signature:(NNode*)
AddFace	NText.cpp	/^void NTextSystem::AddFace(NFace* Face)$/;"	f	class:NTextSystem
AddFrame	NTexture.cpp	/^			Animation->AddFrame(Field);$/;"	p	file:	signature:(Field)
AddFrame	NTexture.cpp	/^void NAnimation::AddFrame(std::string FileName)$/;"	f	class:NAnimation	signature:(std::string FileName)
AddFrame	NTexture.hpp	/^	void AddFrame(std::string FileName);$/;"	p	class:NAnimation	access:public	signature:(std::string FileName)
AddMap	NScene.cpp	/^NMap* NScene::AddMap(std::string TileSet)$/;"	f	class:NScene
AddNode	NScene.cpp	/^void NScene::AddNode(NNode* Node)$/;"	f	class:NScene
AddSound	NScene.cpp	/^NSound* NScene::AddSound(std::string Name)$/;"	f	class:NScene
AddText	NScene.cpp	/^NText* NScene::AddText(std::string Font, std::string Data)$/;"	f	class:NScene
AddTexture	NRender.cpp	/^void NRender::AddTexture(NTexture* Texture)$/;"	f	class:NRender
AddTexture	NRender.hpp	/^	void AddTexture(NTexture* Texture);$/;"	p	class:NRender	access:public	signature:(NTexture* Texture)
AddWindow	NScene.cpp	/^NWindow* NScene::AddWindow()$/;"	f	class:NScene
AdvanceX	NText.hpp	/^	float AdvanceX;$/;"	m	class:NGlyph
AdvanceY	NText.hpp	/^	float AdvanceY;$/;"	m	class:NGlyph
Ang	NNode.cpp	/^	glm::mat4 Ang = glm::rotate(glm::mat4(),Angle,glm::vec3(0,0,1));$/;"	l
Angle	NNode.hpp	/^	float Angle;$/;"	m	class:NNode	access:private
Animation	NTexture.cpp	/^	NAnimation* Animation = lua_toAnimation(L,1);$/;"	l
Animation	NTexture.cpp	/^	NAnimation* Animation = new NAnimation();$/;"	l
Animation	NTexture.cpp	/^	NAnimation** Animation = (NAnimation**)luaL_checkudata(L,index,"AnimationBase");$/;"	l
AnimationMethods	NTexture.cpp	/^	static const luaL_Reg AnimationMethods[] = {$/;"	l	file:
Animation__index	NTexture.cpp	/^int Animation__index(lua_State* L)$/;"	f	signature:(lua_State* L)
Animation__index	NTexture.hpp	/^int Animation__index(lua_State* L);$/;"	p	signature:(lua_State* L)
Animation__newindex	NTexture.cpp	/^int Animation__newindex(lua_State* L)$/;"	f	signature:(lua_State* L)
Animation__newindex	NTexture.hpp	/^int Animation__newindex(lua_State* L);$/;"	p	signature:(lua_State* L)
Animations	NTexture.hpp	/^	std::vector<NAnimation*> Animations;$/;"	m	class:NTexture	access:private
ArgCount	NTexture.cpp	/^	unsigned int ArgCount = lua_gettop(L);$/;"	l
AtlasHeight	NText.hpp	/^	float AtlasHeight;$/;"	m	class:NGlyph
AtlasWidth	NText.hpp	/^	float AtlasWidth;$/;"	m	class:NGlyph
BaseFunctions	NLua.cpp	/^	static const luaL_Reg BaseFunctions[] =$/;"	l	file:
BaseFunctions	NTexture.cpp	/^	static const luaL_Reg BaseFunctions[] = {$/;"	l	file:
BitmapHeight	NText.hpp	/^	float BitmapHeight;$/;"	m	class:NGlyph
BitmapLeft	NText.hpp	/^	float BitmapLeft;$/;"	m	class:NGlyph
BitmapTop	NText.hpp	/^	float BitmapTop;$/;"	m	class:NGlyph
BitmapWidth	NText.hpp	/^	float BitmapWidth;$/;"	m	class:NGlyph
Blue	NColor.hpp	15;"	d
BorderSize	NButton.hpp	/^	float BorderSize;$/;"	m	class:NButton	access:private
BorderSize	NWindow.hpp	/^	float BorderSize;$/;"	m	class:NWindow	access:private
Buffers	NButton.hpp	/^	GLuint* Buffers;$/;"	m	class:NButton	access:private
Buffers	NMap.hpp	/^	std::vector<GLuint*> Buffers;$/;"	m	class:NMap
Buffers	NText.hpp	/^	GLuint* Buffers;$/;"	m	class:NText
Buffers	NWindow.hpp	/^	GLuint* Buffers;$/;"	m	class:NWindow	access:private
CXX	Makefile	/^CXX				= g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS		= -g -O2 -I\/usr\/include\/freetype2$/;"	m
CachedTextures	NRender.hpp	/^	std::vector<NCachedTexture*> CachedTextures;$/;"	m	class:NRender	access:private
Camera	NRender.hpp	/^	NCamera* Camera;$/;"	m	class:NRender	access:private
Changed	NButton.hpp	/^	bool Changed;$/;"	m	class:NButton	access:private
Changed	NMap.hpp	/^	std::vector<bool> Changed;$/;"	m	class:NMap
Changed	NText.hpp	/^	bool Changed;$/;"	m	class:NText
Changed	NText.hpp	/^	bool Changed;$/;"	m	class:NTextureAtlas
Changed	NWindow.hpp	/^	bool Changed;$/;"	m	class:NWindow	access:private
Children	NNode.hpp	/^	std::vector<NNode*> Children;$/;"	m	class:NNode	access:private
CleanUp	NGame.cpp	/^void NGame::CleanUp()$/;"	f	class:NGame
ClearColor	NColor.cpp	/^void ClearColor()$/;"	f	signature:()
ClearColor	NColor.cpp	/^void ClearColor(){}$/;"	f	signature:()
ClearColor	NColor.hpp	/^void ClearColor();$/;"	p	signature:()
Close	NGame.cpp	/^void NGame::Close()$/;"	f	class:NGame
Code	NShader.cpp	/^	const char* Code = VertexShaderCode.c_str();$/;"	l
Color	NColor.cpp	/^	std::cout << "\\e[1;" << Color+30 << 'm';$/;"	l
Color	NNode.hpp	/^	glm::vec4 Color;$/;"	m	class:NNode	access:private
ColorLoc	NButton.hpp	/^	GLuint ColorLoc;$/;"	m	class:NButton	access:private
ColorLoc	NMap.hpp	/^	GLuint ColorLoc, MatrixLoc, TextureLoc;$/;"	m	class:NMap
ColorLoc	NText.hpp	/^	GLuint ColorLoc,TextureLoc,MatrixLoc,ScreenLoc;$/;"	m	class:NText
ColorLoc	NWindow.hpp	/^	GLuint ColorLoc;$/;"	m	class:NWindow	access:private
Config	NGame.hpp	/^	NConfig* Config;$/;"	m	class:NGame
CreateAnimation	NTexture.cpp	/^int CreateAnimation(lua_State* L)$/;"	f	signature:(lua_State* L)
CreateAnimation	NTexture.hpp	/^int CreateAnimation(lua_State* L);$/;"	p	signature:(lua_State* L)
CurTime	NEngine.cpp	/^double CurTime()$/;"	f	signature:()
CurTime	NEngine.hpp	/^double CurTime();$/;"	p	signature:()
CurrentTime	NTexture.hpp	/^	double CurrentTime;$/;"	m	class:NTexture	access:private
DEFS	Makefile	/^DEFS			= -DHAVE_CONFIG_H$/;"	m
Data	NText.hpp	/^	std::string Data;$/;"	m	class:NText
Depth	NMap.hpp	/^	unsigned int Width,Height,Depth;$/;"	m	class:NMap
Difference	NEngine.cpp	/^	float Difference = Max-Min;$/;"	l
DisplayText	NButton.hpp	/^	NText* DisplayText;$/;"	m	class:NButton	access:private
DoFile	NLua.cpp	/^bool NLua::DoFile(std::string File)$/;"	f	class:NLua	signature:(std::string File)
DoFile	NLua.hpp	/^	bool DoFile(std::string File);$/;"	p	class:NLua	access:public	signature:(std::string File)
DoFolder	NLua.cpp	/^bool NLua::DoFolder(std::string Folder)$/;"	f	class:NLua	signature:(std::string Folder)
DoFolder	NLua.hpp	/^	bool DoFolder(std::string Folder);$/;"	p	class:NLua	access:public	signature:(std::string Folder)
Draw	NButton.cpp	/^void NButton::Draw(glm::mat4 View)$/;"	f	class:NButton	signature:(glm::mat4 View)
Draw	NButton.hpp	/^	void Draw(glm::mat4 View);$/;"	p	class:NButton	access:public	signature:(glm::mat4 View)
Draw	NMap.cpp	/^void NMap::Draw(NCamera* View)$/;"	f	class:NMap
Draw	NNode.cpp	/^void NNode::Draw(glm::mat4 View) {}$/;"	f	class:NNode	signature:(glm::mat4 View)
Draw	NNode.hpp	/^	virtual void Draw(glm::mat4 ModelView);$/;"	p	class:NNode	access:public	signature:(glm::mat4 ModelView)
Draw	NRender.cpp	/^void NRender::Draw()$/;"	f	class:NRender
Draw	NRender.hpp	/^	void Draw();$/;"	p	class:NRender	access:public	signature:()
Draw	NScene.cpp	/^void NScene::Draw(NCamera* View)$/;"	f	class:NScene
Draw	NText.cpp	/^void NText::Draw(NCamera* View)$/;"	f	class:NText
Draw	NWindow.cpp	/^void NWindow::Draw(glm::mat4 View)$/;"	f	class:NWindow	signature:(glm::mat4 View)
Draw	NWindow.hpp	/^	void Draw(glm::mat4 View);$/;"	p	class:NWindow	access:public	signature:(glm::mat4 View)
FPS	NRender.hpp	/^	unsigned int FPS;$/;"	m	class:NRender	access:private
FPS	NTexture.hpp	/^	float FPS;$/;"	m	class:NAnimation	access:public
FTLib	NText.hpp	/^	FT_Library FTLib;$/;"	m	class:NTextSystem
Face	NText.hpp	/^	FT_Face Face;$/;"	m	class:NFace
Face	NText.hpp	/^	NFace* Face;$/;"	m	class:NText
Faces	NText.hpp	/^	std::vector<NFace*> Faces;$/;"	m	class:NTextSystem
Fail	NEngine.hpp	70;"	d
Field	NTexture.cpp	/^		const char* Field = luaL_checkstring(L,i);$/;"	l
Field	NTexture.cpp	/^	const char* Field = luaL_checkstring(L,2);$/;"	l
Field	NTexture.cpp	/^	std::string Field = luaL_checkstring(L,2);$/;"	l
File	NConfig.cpp	/^		std::cout << "Tried to use variable " << Name << " as a boolean (It's not a boolean!). Does it exist in " << File << "?\\n";$/;"	l
File	NConfig.cpp	/^		std::cout << "Tried to use variable " << Name << " as a number (It's not a number!). Does it exist in " << File << "?\\n";$/;"	l
File	NConfig.cpp	/^		std::cout << "Tried to use variable " << Name << " as a string (It's not a string!). Does it exist in " << File << "?\\n";$/;"	l
File	NConfig.hpp	/^	std::string File;$/;"	m	class:NConfig	access:private
File	NLua.cpp	/^	std::string File = luaL_checkstring(L,1);$/;"	l
Files	NLua.cpp	/^			std::cout << "Found " << Files[i] << "\\n";$/;"	l
Files	NLua.cpp	/^	std::vector<std::string> Files;$/;"	l
Folder	NLua.cpp	/^	std::cout << "Scanning " << Folder << " for lua files...\\n";$/;"	l
Folder	NLua.cpp	/^	std::string Folder = Source.substr(1,Found);$/;"	l
Folders	NLua.cpp	/^	std::vector<std::string> Folders = GetDir(Folder,ParentFolder);$/;"	l
Folders	NLua.cpp	/^	std::vector<std::string> Folders;$/;"	l
Foo	NTexture.cpp	/^	NAnimation* Foo = lua_toAnimation(L,narg);$/;"	l
Found	NLua.cpp	/^	int Found = Source.find_last_of("\/\\\\");$/;"	l
FragmentFilePath	NShader.cpp	/^		std::cout << "Failed to compile " << FragmentFilePath << "\\n";$/;"	l
FragmentFilePath	NShader.cpp	/^		std::cout << "Failed to load " << FragmentFilePath << "!\\n";$/;"	l
FragmentFilePath	NShader.cpp	/^	std::cout << "Compiling shader " << FragmentFilePath << "\\n";$/;"	l
FragmentShaderCode	NShader.cpp	/^	std::string FragmentShaderCode;$/;"	l
FragmentShaderErrorMessage	NShader.cpp	/^	std::vector<char> FragmentShaderErrorMessage(InfoLogLength);$/;"	p	file:	signature:(InfoLogLength)
FragmentShaderID	NShader.cpp	/^	GLuint FragmentShaderID = glCreateShader(GL_FRAGMENT_SHADER);$/;"	l
FragmentShaderStream	NShader.cpp	/^	std::ifstream FragmentShaderStream(FragmentFilePath.c_str(), std::ios::in);$/;"	p	file:	signature:(FragmentFilePath.c_str(), std::ios::in)
FrameTime	NRender.hpp	/^	double FrameTime;$/;"	m	class:NRender	access:private
Frames	NTexture.hpp	/^	std::vector<NCachedTexture*> Frames;$/;"	m	class:NAnimation	access:private
Game	NEngine.hpp	/^static NGame* Game = new NGame();$/;"	v
GenerateBuffers	NButton.cpp	/^void NButton::GenerateBuffers()$/;"	f	class:NButton	signature:()
GenerateBuffers	NButton.hpp	/^	void GenerateBuffers();$/;"	p	class:NButton	access:private	signature:()
GenerateBuffers	NMap.cpp	/^void NMap::GenerateBuffers()$/;"	f	class:NMap
GenerateBuffers	NText.cpp	/^void NText::GenerateBuffers()$/;"	f	class:NText
GenerateBuffers	NWindow.cpp	/^void NWindow::GenerateBuffers()$/;"	f	class:NWindow	signature:()
GenerateBuffers	NWindow.hpp	/^	void GenerateBuffers();$/;"	p	class:NWindow	access:private	signature:()
GetAng	NButton.cpp	/^		glRotatef(GetAng(),0,0,1);$/;"	p	file:	signature:()
GetAng	NNode.cpp	/^float NNode::GetAng()$/;"	f	class:NNode	signature:()
GetAng	NNode.hpp	/^	virtual float GetAng();$/;"	p	class:NNode	access:public	signature:()
GetAng	NWindow.cpp	/^		glRotatef(GetAng(),0,0,1);$/;"	p	file:	signature:()
GetBool	NConfig.cpp	/^bool NConfig::GetBool(std::string Name)$/;"	f	class:NConfig	signature:(std::string Name)
GetBool	NConfig.hpp	/^	bool GetBool(std::string Name);$/;"	p	class:NConfig	access:public	signature:(std::string Name)
GetCachedTexture	NRender.cpp	/^NCachedTexture* NRender::GetCachedTexture(std::string Name)$/;"	f	class:NRender
GetCachedTexture	NRender.hpp	/^	NCachedTexture* GetCachedTexture(std::string Name);$/;"	p	class:NRender	access:public	signature:(std::string Name)
GetCamera	NRender.cpp	/^NCamera* NRender::GetCamera()$/;"	f	class:NRender
GetCamera	NRender.hpp	/^	NCamera* GetCamera();$/;"	p	class:NRender	access:public	signature:()
GetColor	NButton.cpp	/^		glColor4fv(&(GetColor()[0]));$/;"	p	file:	signature:()
GetColor	NNode.cpp	/^glm::vec4 NNode::GetColor()$/;"	f	class:NNode	signature:()
GetColor	NNode.hpp	/^	virtual glm::vec4 GetColor();$/;"	p	class:NNode	access:public	signature:()
GetColor	NWindow.cpp	/^		glColor4fv(&(GetColor()[0]));$/;"	p	file:	signature:()
GetConfig	NGame.cpp	/^NConfig* NGame::GetConfig()$/;"	f	class:NGame
GetDir	NLua.cpp	/^std::vector<std::string> GetDir(std::string DirectoryName, std::string ParentDirectory)$/;"	f	signature:(std::string DirectoryName, std::string ParentDirectory)
GetFace	NText.cpp	/^NFace* NTextSystem::GetFace(std::string Name)$/;"	f	class:NTextSystem
GetFiles	NLua.cpp	/^std::vector<std::string> GetFiles(std::string DirectoryName)$/;"	f	signature:(std::string DirectoryName)
GetFloat	NConfig.cpp	/^float NConfig::GetFloat(std::string Name)$/;"	f	class:NConfig	signature:(std::string Name)
GetFloat	NConfig.hpp	/^	float GetFloat(std::string Name);$/;"	p	class:NConfig	access:public	signature:(std::string Name)
GetFloat	NTexture.cpp	/^float NAnimation::GetFloat(std::string i_Name)$/;"	f	class:NAnimation	signature:(std::string i_Name)
GetFloat	NTexture.cpp	/^float NTexture::GetFloat(std::string i_Name)$/;"	f	class:NTexture	signature:(std::string i_Name)
GetFloat	NTexture.hpp	/^	float GetFloat(std::string i_Name);$/;"	p	class:NAnimation	access:public	signature:(std::string i_Name)
GetFloat	NTexture.hpp	/^	float GetFloat(std::string i_Name);$/;"	p	class:NTexture	access:public	signature:(std::string i_Name)
GetFrameTime	NRender.cpp	/^double NRender::GetFrameTime()$/;"	f	class:NRender
GetFrameTime	NRender.hpp	/^	double GetFrameTime();$/;"	p	class:NRender	access:public	signature:()
GetFreeTypeLib	NText.cpp	/^FT_Library NTextSystem::GetFreeTypeLib()$/;"	f	class:NTextSystem
GetGame	NEngine.cpp	/^NGame* GetGame()$/;"	f	signature:()
GetGame	NEngine.hpp	/^NGame* GetGame();$/;"	p	signature:()
GetGlyph	NText.cpp	/^NGlyph* NFace::GetGlyph(unsigned int ID, unsigned int Size)$/;"	f	class:NFace
GetGlyph	NText.cpp	/^NGlyph* NTextureAtlas::GetGlyph(FT_Face Face, unsigned int ID)$/;"	f	class:NTextureAtlas
GetHeight	NRender.cpp	/^float NCachedTexture::GetHeight()$/;"	f	class:NCachedTexture
GetHeight	NRender.hpp	/^	float GetHeight();$/;"	p	class:NCachedTexture	access:public	signature:()
GetID	NShader.cpp	/^GLuint NShader::GetID()$/;"	f	class:NShader	signature:()
GetID	NShader.hpp	/^	GLuint GetID();$/;"	p	class:NShader	access:public	signature:()
GetID	NTexture.cpp	/^GLuint NAnimation::GetID(double Time)$/;"	f	class:NAnimation	signature:(double Time)
GetID	NTexture.cpp	/^GLuint NTexture::GetID()$/;"	f	class:NTexture	signature:()
GetID	NTexture.hpp	/^	GLuint GetID();$/;"	p	class:NTexture	access:public	signature:()
GetID	NTexture.hpp	/^	GLuint GetID(double Time);$/;"	p	class:NAnimation	access:public	signature:(double Time)
GetInput	NGame.cpp	/^NInput* NGame::GetInput()$/;"	f	class:NGame
GetKey	NInput.cpp	/^int NInput::GetKey(int Key)$/;"	f	class:NInput	signature:(int Key)
GetKey	NInput.hpp	/^	int GetKey(int Key);$/;"	p	class:NInput	access:public	signature:(int Key)
GetL	NLua.cpp	/^lua_State* NLua::GetL()$/;"	f	class:NLua	signature:()
GetL	NLua.hpp	/^	lua_State* GetL();$/;"	p	class:NLua	access:public	signature:()
GetLua	NGame.cpp	/^NLua* NGame::GetLua()$/;"	f	class:NGame
GetModelMatrix	NNode.cpp	/^glm::mat4 NNode::GetModelMatrix()$/;"	f	class:NNode	signature:()
GetModelMatrix	NNode.hpp	/^	virtual glm::mat4 GetModelMatrix();$/;"	p	class:NNode	access:public	signature:()
GetMouse	NInput.cpp	/^glm::vec2 NInput::GetMouse()$/;"	f	class:NInput	signature:()
GetMouse	NInput.hpp	/^	glm::vec2 GetMouse();$/;"	p	class:NInput	access:public	signature:()
GetMouseKey	NInput.cpp	/^int NInput::GetMouseKey(int Key)$/;"	f	class:NInput	signature:(int Key)
GetMouseKey	NInput.hpp	/^	int GetMouseKey(int Key);$/;"	p	class:NInput	access:public	signature:(int Key)
GetMouseX	NInput.cpp	/^int NInput::GetMouseX()$/;"	f	class:NInput	signature:()
GetMouseX	NInput.hpp	/^	int GetMouseX();$/;"	p	class:NInput	access:public	signature:()
GetMouseY	NInput.cpp	/^int NInput::GetMouseY()$/;"	f	class:NInput	signature:()
GetMouseY	NInput.hpp	/^	int GetMouseY();$/;"	p	class:NInput	access:public	signature:()
GetName	NShader.cpp	/^std::string NShader::GetName()$/;"	f	class:NShader	signature:()
GetName	NShader.cpp	/^std::string NUniform::GetName()$/;"	f	class:NUniform	signature:()
GetName	NShader.hpp	/^	std::string GetName();$/;"	p	class:NShader	access:public	signature:()
GetName	NShader.hpp	/^	std::string GetName();$/;"	p	class:NUniform	access:public	signature:()
GetName	NText.cpp	/^std::string NFace::GetName()$/;"	f	class:NFace
GetName	NTexture.cpp	/^std::string NAnimation::GetName()$/;"	f	class:NAnimation	signature:()
GetName	NTexture.hpp	/^	std::string GetName();$/;"	p	class:NAnimation	access:public	signature:()
GetNonScaleMatrix	NNode.cpp	/^glm::mat4 NNode::GetNonScaleMatrix()$/;"	f	class:NNode	signature:()
GetNonScaleMatrix	NNode.hpp	/^	virtual glm::mat4 GetNonScaleMatrix();$/;"	p	class:NNode	access:public	signature:()
GetOrthoMatrix	NCamera.cpp	/^glm::mat4 NCamera::GetOrthoMatrix()$/;"	f	class:NCamera
GetParent	NNode.cpp	/^NNode* NNode::GetParent()$/;"	f	class:NNode	signature:()
GetParent	NNode.hpp	/^	virtual NNode* GetParent();$/;"	p	class:NNode	access:public	signature:()
GetPerspMatrix	NCamera.cpp	/^glm::mat4 NCamera::GetPerspMatrix()$/;"	f	class:NCamera
GetPerspViewMatrix	NCamera.cpp	/^glm::mat4 NCamera::GetPerspViewMatrix()$/;"	f	class:NCamera
GetPos	NNode.cpp	/^glm::vec2 NNode::GetPos()$/;"	f	class:NNode	signature:()
GetPos	NNode.hpp	/^	virtual glm::vec2 GetPos();$/;"	p	class:NNode	access:public	signature:()
GetRender	NGame.cpp	/^NRender* NGame::GetRender()$/;"	f	class:NGame
GetScale	NNode.cpp	/^glm::vec2 NNode::GetScale()$/;"	f	class:NNode	signature:()
GetScale	NNode.hpp	/^	virtual glm::vec2 GetScale();$/;"	p	class:NNode	access:public	signature:()
GetScene	NGame.cpp	/^NScene* NGame::GetScene()$/;"	f	class:NGame
GetShader	NRender.cpp	/^NShader* NRender::GetShader(std::string Name)$/;"	f	class:NRender
GetShader	NRender.hpp	/^	NShader* GetShader(std::string Name);$/;"	p	class:NRender	access:public	signature:(std::string Name)
GetSize	NRender.cpp	/^glm::vec2 NCachedTexture::GetSize()$/;"	f	class:NCachedTexture
GetSize	NRender.hpp	/^	glm::vec2 GetSize();$/;"	p	class:NCachedTexture	access:public	signature:()
GetSize	NText.cpp	/^float NText::GetSize()$/;"	f	class:NText
GetSize	NText.cpp	/^unsigned int NTextureAtlas::GetSize()$/;"	f	class:NTextureAtlas
GetSize	NTexture.cpp	/^glm::vec2 NAnimation::GetSize(double Time)$/;"	f	class:NAnimation	signature:(double Time)
GetSize	NTexture.cpp	/^glm::vec2 NTexture::GetSize()$/;"	f	class:NTexture	signature:()
GetSize	NTexture.hpp	/^	glm::vec2 GetSize();$/;"	p	class:NTexture	access:public	signature:()
GetSize	NTexture.hpp	/^	glm::vec2 GetSize(double Time);$/;"	p	class:NAnimation	access:public	signature:(double Time)
GetSoundSystem	NGame.cpp	/^NSoundSystem* NGame::GetSoundSystem()$/;"	f	class:NGame
GetString	NConfig.cpp	/^std::string NConfig::GetString(std::string Name)$/;"	f	class:NConfig	signature:(std::string Name)
GetString	NConfig.hpp	/^	std::string GetString(std::string Name);$/;"	p	class:NConfig	access:public	signature:(std::string Name)
GetTextSystem	NGame.cpp	/^NTextSystem* NGame::GetTextSystem()$/;"	f	class:NGame
GetTexture	NRender.cpp	/^NTexture* NRender::GetTexture(std::string Name)$/;"	f	class:NRender
GetTexture	NRender.hpp	/^	NTexture* GetTexture(std::string Name);$/;"	p	class:NRender	access:public	signature:(std::string Name)
GetTexture	NText.cpp	/^GLuint NFace::GetTexture(unsigned int Size)$/;"	f	class:NFace
GetTexture	NText.cpp	/^GLuint NTextureAtlas::GetTexture()$/;"	f	class:NTextureAtlas
GetTextureFilter	NRender.cpp	/^GLuint NRender::GetTextureFilter()$/;"	f	class:NRender
GetTextureFilter	NRender.hpp	/^	GLuint GetTextureFilter();$/;"	p	class:NRender	access:public	signature:()
GetUV	NText.cpp	/^float NGlyph::GetUV()$/;"	f	class:NGlyph
GetUniformLocation	NShader.cpp	/^GLuint NShader::GetUniformLocation(std::string i_Name)$/;"	f	class:NShader	signature:(std::string i_Name)
GetUniformLocation	NShader.cpp	/^GLuint NUniform::GetUniformLocation()$/;"	f	class:NUniform	signature:()
GetUniformLocation	NShader.hpp	/^	GLuint GetUniformLocation();$/;"	p	class:NUniform	access:public	signature:()
GetUniformLocation	NShader.hpp	/^	GLuint GetUniformLocation(std::string i_Name);$/;"	p	class:NShader	access:public	signature:(std::string i_Name)
GetVSync	NRender.cpp	/^bool NRender::GetVSync()$/;"	f	class:NRender
GetVSync	NRender.hpp	/^	bool GetVSync();$/;"	p	class:NRender	access:public	signature:()
GetViewMatrix	NCamera.cpp	/^glm::mat4 NCamera::GetViewMatrix()$/;"	f	class:NCamera
GetWidth	NRender.cpp	/^float NCachedTexture::GetWidth()$/;"	f	class:NCachedTexture
GetWidth	NRender.hpp	/^	float GetWidth();$/;"	p	class:NCachedTexture	access:public	signature:()
GetWidth	NText.cpp	/^float NText::GetWidth()$/;"	f	class:NText
GetWindowChanged	NGame.cpp	/^bool NGame::GetWindowChanged()$/;"	f	class:NGame
GetWindowHeight	NGame.cpp	/^int NGame::GetWindowHeight()$/;"	f	class:NGame
GetWindowSize	NGame.cpp	/^glm::vec2 NGame::GetWindowSize()$/;"	f	class:NGame
GetWindowWidth	NGame.cpp	/^int NGame::GetWindowWidth()$/;"	f	class:NGame
Glyphs	NText.hpp	/^	std::vector<NGlyph*> Glyphs;$/;"	m	class:NTextureAtlas
Green	NColor.hpp	13;"	d
HAVE_FLOOR	config.h	5;"	d
HAVE_INTTYPES_H	config.h	8;"	d
HAVE_MEMORY_H	config.h	11;"	d
HAVE_SQRT	config.h	14;"	d
HAVE_STDBOOL_H	config.h	17;"	d
HAVE_STDINT_H	config.h	20;"	d
HAVE_STDLIB_H	config.h	23;"	d
HAVE_STRINGS_H	config.h	26;"	d
HAVE_STRING_H	config.h	29;"	d
HAVE_SYS_STAT_H	config.h	32;"	d
HAVE_SYS_TYPES_H	config.h	35;"	d
HAVE_UNISTD_H	config.h	38;"	d
Height	NGame.hpp	/^	int Height;$/;"	m	class:NGame
Height	NMap.hpp	/^	unsigned int Width,Height,Depth;$/;"	m	class:NMap
Height	NRender.hpp	/^	int Width, Height;$/;"	m	class:NCachedTexture	access:private
Height	NText.hpp	/^	int Width, Height;$/;"	m	class:NTextureAtlas
ID	NMap.hpp	/^	unsigned int ID;$/;"	m	class:NTile
ID	NRender.hpp	/^	GLuint ID;$/;"	m	class:NCachedTexture	access:public
ID	NTexture.cpp	/^	NCachedTexture* ID = GetGame()->GetRender()->GetCachedTexture(FileName);$/;"	l
IDLoc	NTexture.cpp	/^	unsigned int IDLoc = fmod(Time*FPS,Frames.size());$/;"	l
INSTALL	Makefile	/^INSTALL			= \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA	= ${INSTALL} -m 644$/;"	m
Include	NLua.cpp	/^int Include(lua_State* L)$/;"	f	signature:(lua_State* L)
Include	NLua.hpp	/^int Include(lua_State* L);$/;"	p	signature:(lua_State* L)
InfoLogLength	NShader.cpp	/^	int InfoLogLength;$/;"	l
Init	NGame.cpp	/^bool NGame::Init(int i_Width, int i_Height, std::string Title)$/;"	f	class:NGame
Init	NMap.cpp	/^void NMap::Init(unsigned int i_Width, unsigned int i_Height, unsigned int i_Depth)$/;"	f	class:NMap
Input	NGame.hpp	/^	NInput* Input;$/;"	m	class:NGame
Intersects	NPhysics.cpp	/^bool Intersects(glm::vec4 Box, glm::vec2 Point)$/;"	f	signature:(glm::vec4 Box, glm::vec2 Point)
Intersects	NPhysics.hpp	/^bool Intersects(glm::vec4 Box, glm::vec2 Point);$/;"	p	signature:(glm::vec4 Box, glm::vec2 Point)
KeyChanged	NInput.cpp	/^bool NInput::KeyChanged(int Key)$/;"	f	class:NInput	signature:(int Key)
KeyChanged	NInput.hpp	/^	bool KeyChanged(int Key);$/;"	p	class:NInput	access:public	signature:(int Key)
Keys	NInput.hpp	/^	int Keys[128];$/;"	m	class:NInput	access:private
L	NConfig.cpp	/^	lua_State* L = GetGame()->GetLua()->GetL();$/;"	l
L	NLua.hpp	/^	lua_State* L;$/;"	m	class:NLua	access:private
L	NTexture.cpp	/^	lua_State* L = GetGame()->GetLua()->GetL();$/;"	l
LIBS	Makefile	/^LIBS			= -lSOIL -llua -lfreetype -lglfw -lGLEW -lGL $/;"	m
LUA_COMPAT_MODULE	NEngine.hpp	62;"	d
LastTick	NScene.hpp	/^	double LastTick;$/;"	m	class:NScene
LastTime	NRender.hpp	/^	double LastTime;$/;"	m	class:NRender	access:private
Line	NShader.cpp	/^	std::string Line;$/;"	l
Load	NShader.cpp	/^bool NShader::Load(std::string VertexFilePath, std::string FragmentFilePath)$/;"	f	class:NShader	signature:(std::string VertexFilePath, std::string FragmentFilePath)
Load	NShader.hpp	/^	bool Load(std::string VertexShaderPath,std::string FragmentShaderPath);$/;"	p	class:NShader	access:public	signature:(std::string VertexShaderPath,std::string FragmentShaderPath)
Load	NText.cpp	/^bool NFace::Load(FT_Library FTLib, std::string File)$/;"	f	class:NFace
LoadFace	NText.cpp	/^int LoadFace(lua_State* L)$/;"	f
LoadFaces	NText.cpp	/^void NTextSystem::LoadFaces()$/;"	f	class:NTextSystem
LoadShaders	NRender.cpp	/^bool NRender::LoadShaders()$/;"	f	class:NRender
LoadShaders	NRender.hpp	/^	bool LoadShaders();$/;"	p	class:NRender	access:public	signature:()
LoadTexture	NTexture.cpp	/^int LoadTexture(lua_State* L)$/;"	f	signature:(lua_State* L)
LoadTexture	NTexture.hpp	/^int LoadTexture(lua_State* L);$/;"	p	signature:(lua_State* L)
LoadTextures	NRender.cpp	/^void NRender::LoadTextures()$/;"	f	class:NRender
LoadTextures	NTexture.cpp	/^void LoadTextures()$/;"	f	signature:()
LoadTextures	NTexture.hpp	/^void LoadTextures();$/;"	p	signature:()
Lua	NGame.hpp	/^	NLua* Lua;$/;"	m	class:NGame
MP	NButton.cpp	/^	glm::vec2 MP = GetGame()->GetInput()->GetMouse();$/;"	l
Matrix	NNode.hpp	/^	glm::mat4 Matrix;$/;"	m	class:NNode	access:private
MatrixLoc	NButton.hpp	/^	GLuint MatrixLoc;$/;"	m	class:NButton	access:private
MatrixLoc	NMap.hpp	/^	GLuint ColorLoc, MatrixLoc, TextureLoc;$/;"	m	class:NMap
MatrixLoc	NText.hpp	/^	GLuint ColorLoc,TextureLoc,MatrixLoc,ScreenLoc;$/;"	m	class:NText
MatrixLoc	NWindow.hpp	/^	GLuint MatrixLoc;$/;"	m	class:NWindow	access:private
MaxFPS	NRender.hpp	/^	float MaxFPS;$/;"	m	class:NRender	access:private
Mode	NText.hpp	/^	int Mode;$/;"	m	class:NText
ModelView	NButton.cpp	/^	glm::mat4 ModelView = GetModelMatrix()*View;$/;"	l
ModelView	NWindow.cpp	/^	glm::mat4 ModelView = GetModelMatrix()*View;$/;"	l
MouseX	NInput.hpp	/^	int MouseX;$/;"	m	class:NInput	access:private
MouseY	NInput.hpp	/^	int MouseY;$/;"	m	class:NInput	access:private
NAELSTROF_BUTTON	NButton.hpp	10;"	d
NAELSTROF_CAMERA	NCamera.hpp	9;"	d
NAELSTROF_COLOR	NColor.hpp	10;"	d
NAELSTROF_CONFIG	NConfig.hpp	9;"	d
NAELSTROF_ENGINE	NEngine.hpp	45;"	d
NAELSTROF_GAME	NGame.hpp	2;"	d
NAELSTROF_INPUT	NInput.hpp	10;"	d
NAELSTROF_LUA	NLua.hpp	9;"	d
NAELSTROF_MAP	NMap.hpp	2;"	d
NAELSTROF_NODE	NNode.hpp	10;"	d
NAELSTROF_PHYSICS	NPhysics.hpp	2;"	d
NAELSTROF_RENDER	NRender.hpp	9;"	d
NAELSTROF_SCENE	NScene.hpp	9;"	d
NAELSTROF_SHADER	NShader.hpp	9;"	d
NAELSTROF_TEXT	NText.hpp	9;"	d
NAELSTROF_TEXTURE	NTexture.hpp	9;"	d
NAELSTROF_WINDOW	NWindow.hpp	10;"	d
NAnimation	NTexture.cpp	/^NAnimation::NAnimation()$/;"	f	class:NAnimation	signature:()
NAnimation	NTexture.hpp	/^	NAnimation();$/;"	p	class:NAnimation	access:public	signature:()
NAnimation	NTexture.hpp	/^class NAnimation$/;"	c
NAnimation::AddFrame	NTexture.cpp	/^void NAnimation::AddFrame(std::string FileName)$/;"	f	class:NAnimation	signature:(std::string FileName)
NAnimation::AddFrame	NTexture.hpp	/^	void AddFrame(std::string FileName);$/;"	p	class:NAnimation	access:public	signature:(std::string FileName)
NAnimation::FPS	NTexture.hpp	/^	float FPS;$/;"	m	class:NAnimation	access:public
NAnimation::Frames	NTexture.hpp	/^	std::vector<NCachedTexture*> Frames;$/;"	m	class:NAnimation	access:private
NAnimation::GetFloat	NTexture.cpp	/^float NAnimation::GetFloat(std::string i_Name)$/;"	f	class:NAnimation	signature:(std::string i_Name)
NAnimation::GetFloat	NTexture.hpp	/^	float GetFloat(std::string i_Name);$/;"	p	class:NAnimation	access:public	signature:(std::string i_Name)
NAnimation::GetID	NTexture.cpp	/^GLuint NAnimation::GetID(double Time)$/;"	f	class:NAnimation	signature:(double Time)
NAnimation::GetID	NTexture.hpp	/^	GLuint GetID(double Time);$/;"	p	class:NAnimation	access:public	signature:(double Time)
NAnimation::GetName	NTexture.cpp	/^std::string NAnimation::GetName()$/;"	f	class:NAnimation	signature:()
NAnimation::GetName	NTexture.hpp	/^	std::string GetName();$/;"	p	class:NAnimation	access:public	signature:()
NAnimation::GetSize	NTexture.cpp	/^glm::vec2 NAnimation::GetSize(double Time)$/;"	f	class:NAnimation	signature:(double Time)
NAnimation::GetSize	NTexture.hpp	/^	glm::vec2 GetSize(double Time);$/;"	p	class:NAnimation	access:public	signature:(double Time)
NAnimation::NAnimation	NTexture.cpp	/^NAnimation::NAnimation()$/;"	f	class:NAnimation	signature:()
NAnimation::NAnimation	NTexture.hpp	/^	NAnimation();$/;"	p	class:NAnimation	access:public	signature:()
NAnimation::Name	NTexture.hpp	/^	std::string Name;$/;"	m	class:NAnimation	access:private
NAnimation::Reference	NTexture.hpp	/^	int Reference;$/;"	m	class:NAnimation	access:public
NAnimation::SetName	NTexture.cpp	/^void NAnimation::SetName(std::string i_Name)$/;"	f	class:NAnimation	signature:(std::string i_Name)
NAnimation::SetName	NTexture.hpp	/^	void SetName(std::string i_Name);$/;"	p	class:NAnimation	access:public	signature:(std::string i_Name)
NAnimation::~NAnimation	NTexture.cpp	/^NAnimation::~NAnimation()$/;"	f	class:NAnimation	signature:()
NAnimation::~NAnimation	NTexture.hpp	/^	~NAnimation();$/;"	p	class:NAnimation	access:public	signature:()
NButton	NButton.cpp	/^NButton::NButton()$/;"	f	class:NButton	signature:()
NButton	NButton.hpp	/^	NButton();$/;"	p	class:NButton	access:public	signature:()
NButton	NButton.hpp	/^class NButton : public NNode$/;"	c	inherits:NNode
NButton::BorderSize	NButton.hpp	/^	float BorderSize;$/;"	m	class:NButton	access:private
NButton::Buffers	NButton.hpp	/^	GLuint* Buffers;$/;"	m	class:NButton	access:private
NButton::Changed	NButton.hpp	/^	bool Changed;$/;"	m	class:NButton	access:private
NButton::ColorLoc	NButton.hpp	/^	GLuint ColorLoc;$/;"	m	class:NButton	access:private
NButton::DisplayText	NButton.hpp	/^	NText* DisplayText;$/;"	m	class:NButton	access:private
NButton::Draw	NButton.cpp	/^void NButton::Draw(glm::mat4 View)$/;"	f	class:NButton	signature:(glm::mat4 View)
NButton::Draw	NButton.hpp	/^	void Draw(glm::mat4 View);$/;"	p	class:NButton	access:public	signature:(glm::mat4 View)
NButton::GenerateBuffers	NButton.cpp	/^void NButton::GenerateBuffers()$/;"	f	class:NButton	signature:()
NButton::GenerateBuffers	NButton.hpp	/^	void GenerateBuffers();$/;"	p	class:NButton	access:private	signature:()
NButton::MatrixLoc	NButton.hpp	/^	GLuint MatrixLoc;$/;"	m	class:NButton	access:private
NButton::NButton	NButton.cpp	/^NButton::NButton()$/;"	f	class:NButton	signature:()
NButton::NButton	NButton.hpp	/^	NButton();$/;"	p	class:NButton	access:public	signature:()
NButton::ScreenLoc	NButton.hpp	/^	GLuint ScreenLoc;$/;"	m	class:NButton	access:private
NButton::SetText	NButton.cpp	/^void NButton::SetText(std::string Text)$/;"	f	class:NButton	signature:(std::string Text)
NButton::SetText	NButton.hpp	/^	void SetText(std::string Text);$/;"	p	class:NButton	access:public	signature:(std::string Text)
NButton::SetTexture	NButton.cpp	/^void NButton::SetTexture(std::string Name)$/;"	f	class:NButton	signature:(std::string Name)
NButton::SetTexture	NButton.hpp	/^	void SetTexture(std::string Name);$/;"	p	class:NButton	access:public	signature:(std::string Name)
NButton::Shader	NButton.hpp	/^	NShader* Shader;$/;"	m	class:NButton	access:private
NButton::Texture	NButton.hpp	/^	NTexture* Texture;$/;"	m	class:NButton	access:public
NButton::TextureLoc	NButton.hpp	/^	GLuint TextureLoc;$/;"	m	class:NButton	access:private
NButton::Tick	NButton.cpp	/^void NButton::Tick(double DT)$/;"	f	class:NButton	signature:(double DT)
NButton::Tick	NButton.hpp	/^	void Tick(double DT);$/;"	p	class:NButton	access:public	signature:(double DT)
NButton::UVs	NButton.hpp	/^	std::vector<glm::vec2> UVs;$/;"	m	class:NButton	access:private
NButton::Verts	NButton.hpp	/^	std::vector<glm::vec2> Verts;$/;"	m	class:NButton	access:private
NButton::~NButton	NButton.cpp	/^NButton::~NButton()$/;"	f	class:NButton	signature:()
NButton::~NButton	NButton.hpp	/^	~NButton();$/;"	p	class:NButton	access:public	signature:()
NCachedTexture	NRender.cpp	/^NCachedTexture::NCachedTexture(std::string i_Name)$/;"	f	class:NCachedTexture
NCachedTexture	NRender.cpp	/^NCachedTexture::NCachedTexture(std::string i_Name, GLuint i_ID)$/;"	f	class:NCachedTexture
NCachedTexture	NRender.hpp	/^	NCachedTexture(std::string i_Name);$/;"	p	class:NCachedTexture	access:public	signature:(std::string i_Name)
NCachedTexture	NRender.hpp	/^	NCachedTexture(std::string i_Name, GLuint ID);$/;"	p	class:NCachedTexture	access:public	signature:(std::string i_Name, GLuint ID)
NCachedTexture	NRender.hpp	/^class NCachedTexture$/;"	c
NCachedTexture::GetHeight	NRender.hpp	/^	float GetHeight();$/;"	p	class:NCachedTexture	access:public	signature:()
NCachedTexture::GetSize	NRender.hpp	/^	glm::vec2 GetSize();$/;"	p	class:NCachedTexture	access:public	signature:()
NCachedTexture::GetWidth	NRender.hpp	/^	float GetWidth();$/;"	p	class:NCachedTexture	access:public	signature:()
NCachedTexture::Height	NRender.hpp	/^	int Width, Height;$/;"	m	class:NCachedTexture	access:private
NCachedTexture::ID	NRender.hpp	/^	GLuint ID;$/;"	m	class:NCachedTexture	access:public
NCachedTexture::NCachedTexture	NRender.hpp	/^	NCachedTexture(std::string i_Name);$/;"	p	class:NCachedTexture	access:public	signature:(std::string i_Name)
NCachedTexture::NCachedTexture	NRender.hpp	/^	NCachedTexture(std::string i_Name, GLuint ID);$/;"	p	class:NCachedTexture	access:public	signature:(std::string i_Name, GLuint ID)
NCachedTexture::Name	NRender.hpp	/^	std::string Name;$/;"	m	class:NCachedTexture	access:public
NCachedTexture::SetFilter	NRender.hpp	/^	void SetFilter(GLuint);$/;"	p	class:NCachedTexture	access:public	signature:(GLuint)
NCachedTexture::Width	NRender.hpp	/^	int Width, Height;$/;"	m	class:NCachedTexture	access:private
NCachedTexture::~NCachedTexture	NRender.hpp	/^	~NCachedTexture();$/;"	p	class:NCachedTexture	access:public	signature:()
NCamera	NCamera.cpp	/^NCamera::NCamera()$/;"	f	class:NCamera
NCamera	NCamera.hpp	/^class NCamera : public NNode$/;"	c
NConfig	NConfig.cpp	/^NConfig::NConfig(std::string i_File)$/;"	f	class:NConfig	signature:(std::string i_File)
NConfig	NConfig.hpp	/^	NConfig(std::string i_File);$/;"	p	class:NConfig	access:public	signature:(std::string i_File)
NConfig	NConfig.hpp	/^class NConfig$/;"	c
NConfig::File	NConfig.hpp	/^	std::string File;$/;"	m	class:NConfig	access:private
NConfig::GetBool	NConfig.cpp	/^bool NConfig::GetBool(std::string Name)$/;"	f	class:NConfig	signature:(std::string Name)
NConfig::GetBool	NConfig.hpp	/^	bool GetBool(std::string Name);$/;"	p	class:NConfig	access:public	signature:(std::string Name)
NConfig::GetFloat	NConfig.cpp	/^float NConfig::GetFloat(std::string Name)$/;"	f	class:NConfig	signature:(std::string Name)
NConfig::GetFloat	NConfig.hpp	/^	float GetFloat(std::string Name);$/;"	p	class:NConfig	access:public	signature:(std::string Name)
NConfig::GetString	NConfig.cpp	/^std::string NConfig::GetString(std::string Name)$/;"	f	class:NConfig	signature:(std::string Name)
NConfig::GetString	NConfig.hpp	/^	std::string GetString(std::string Name);$/;"	p	class:NConfig	access:public	signature:(std::string Name)
NConfig::NConfig	NConfig.cpp	/^NConfig::NConfig(std::string i_File)$/;"	f	class:NConfig	signature:(std::string i_File)
NConfig::NConfig	NConfig.hpp	/^	NConfig(std::string i_File);$/;"	p	class:NConfig	access:public	signature:(std::string i_File)
NConfig::~NConfig	NConfig.cpp	/^NConfig::~NConfig()$/;"	f	class:NConfig	signature:()
NConfig::~NConfig	NConfig.hpp	/^	~NConfig();$/;"	p	class:NConfig	access:public	signature:()
NFace	NText.cpp	/^NFace::NFace(std::string i_Name)$/;"	f	class:NFace
NFace	NText.hpp	/^class NFace$/;"	c
NGame	NGame.cpp	/^NGame::NGame()$/;"	f	class:NGame
NGame	NGame.hpp	/^class NGame$/;"	c
NGlyph	NText.cpp	/^NGlyph::NGlyph(FT_Face Face, float i_X)$/;"	f	class:NGlyph
NGlyph	NText.hpp	/^class NGlyph$/;"	c
NInput	NInput.hpp	/^class NInput$/;"	c
NInput::GetKey	NInput.cpp	/^int NInput::GetKey(int Key)$/;"	f	class:NInput	signature:(int Key)
NInput::GetKey	NInput.hpp	/^	int GetKey(int Key);$/;"	p	class:NInput	access:public	signature:(int Key)
NInput::GetMouse	NInput.cpp	/^glm::vec2 NInput::GetMouse()$/;"	f	class:NInput	signature:()
NInput::GetMouse	NInput.hpp	/^	glm::vec2 GetMouse();$/;"	p	class:NInput	access:public	signature:()
NInput::GetMouseKey	NInput.cpp	/^int NInput::GetMouseKey(int Key)$/;"	f	class:NInput	signature:(int Key)
NInput::GetMouseKey	NInput.hpp	/^	int GetMouseKey(int Key);$/;"	p	class:NInput	access:public	signature:(int Key)
NInput::GetMouseX	NInput.cpp	/^int NInput::GetMouseX()$/;"	f	class:NInput	signature:()
NInput::GetMouseX	NInput.hpp	/^	int GetMouseX();$/;"	p	class:NInput	access:public	signature:()
NInput::GetMouseY	NInput.cpp	/^int NInput::GetMouseY()$/;"	f	class:NInput	signature:()
NInput::GetMouseY	NInput.hpp	/^	int GetMouseY();$/;"	p	class:NInput	access:public	signature:()
NInput::KeyChanged	NInput.cpp	/^bool NInput::KeyChanged(int Key)$/;"	f	class:NInput	signature:(int Key)
NInput::KeyChanged	NInput.hpp	/^	bool KeyChanged(int Key);$/;"	p	class:NInput	access:public	signature:(int Key)
NInput::Keys	NInput.hpp	/^	int Keys[128];$/;"	m	class:NInput	access:private
NInput::MouseX	NInput.hpp	/^	int MouseX;$/;"	m	class:NInput	access:private
NInput::MouseY	NInput.hpp	/^	int MouseY;$/;"	m	class:NInput	access:private
NInput::Poll	NInput.cpp	/^void NInput::Poll()$/;"	f	class:NInput	signature:()
NInput::Poll	NInput.hpp	/^	void Poll();$/;"	p	class:NInput	access:public	signature:()
NLua	NLua.cpp	/^NLua::NLua()$/;"	f	class:NLua	signature:()
NLua	NLua.hpp	/^	NLua();$/;"	p	class:NLua	access:public	signature:()
NLua	NLua.hpp	/^class NLua$/;"	c
NLua::DoFile	NLua.cpp	/^bool NLua::DoFile(std::string File)$/;"	f	class:NLua	signature:(std::string File)
NLua::DoFile	NLua.hpp	/^	bool DoFile(std::string File);$/;"	p	class:NLua	access:public	signature:(std::string File)
NLua::DoFolder	NLua.cpp	/^bool NLua::DoFolder(std::string Folder)$/;"	f	class:NLua	signature:(std::string Folder)
NLua::DoFolder	NLua.hpp	/^	bool DoFolder(std::string Folder);$/;"	p	class:NLua	access:public	signature:(std::string Folder)
NLua::GetL	NLua.cpp	/^lua_State* NLua::GetL()$/;"	f	class:NLua	signature:()
NLua::GetL	NLua.hpp	/^	lua_State* GetL();$/;"	p	class:NLua	access:public	signature:()
NLua::L	NLua.hpp	/^	lua_State* L;$/;"	m	class:NLua	access:private
NLua::NLua	NLua.cpp	/^NLua::NLua()$/;"	f	class:NLua	signature:()
NLua::NLua	NLua.hpp	/^	NLua();$/;"	p	class:NLua	access:public	signature:()
NLua::~NLua	NLua.cpp	/^NLua::~NLua()$/;"	f	class:NLua	signature:()
NLua::~NLua	NLua.hpp	/^	~NLua();$/;"	p	class:NLua	access:public	signature:()
NMap	NMap.cpp	/^NMap::NMap(std::string i_TileSet)$/;"	f	class:NMap
NMap	NMap.hpp	/^class NMap : public NNode$/;"	c
NNode	NNode.cpp	/^NNode::NNode()$/;"	f	class:NNode	signature:()
NNode	NNode.hpp	/^	NNode();$/;"	p	class:NNode	access:public	signature:()
NNode	NNode.hpp	/^class NNode$/;"	c
NNode::AddChild	NNode.cpp	/^void NNode::AddChild(NNode* Node)$/;"	f	class:NNode	signature:(NNode* Node)
NNode::AddChild	NNode.hpp	/^	virtual void AddChild(NNode*);$/;"	p	class:NNode	access:public	signature:(NNode*)
NNode::Angle	NNode.hpp	/^	float Angle;$/;"	m	class:NNode	access:private
NNode::Children	NNode.hpp	/^	std::vector<NNode*> Children;$/;"	m	class:NNode	access:private
NNode::Color	NNode.hpp	/^	glm::vec4 Color;$/;"	m	class:NNode	access:private
NNode::Draw	NNode.cpp	/^void NNode::Draw(glm::mat4 View) {}$/;"	f	class:NNode	signature:(glm::mat4 View)
NNode::Draw	NNode.hpp	/^	virtual void Draw(glm::mat4 ModelView);$/;"	p	class:NNode	access:public	signature:(glm::mat4 ModelView)
NNode::GetAng	NNode.cpp	/^float NNode::GetAng()$/;"	f	class:NNode	signature:()
NNode::GetAng	NNode.hpp	/^	virtual float GetAng();$/;"	p	class:NNode	access:public	signature:()
NNode::GetColor	NNode.cpp	/^glm::vec4 NNode::GetColor()$/;"	f	class:NNode	signature:()
NNode::GetColor	NNode.hpp	/^	virtual glm::vec4 GetColor();$/;"	p	class:NNode	access:public	signature:()
NNode::GetModelMatrix	NNode.cpp	/^glm::mat4 NNode::GetModelMatrix()$/;"	f	class:NNode	signature:()
NNode::GetModelMatrix	NNode.hpp	/^	virtual glm::mat4 GetModelMatrix();$/;"	p	class:NNode	access:public	signature:()
NNode::GetNonScaleMatrix	NNode.cpp	/^glm::mat4 NNode::GetNonScaleMatrix()$/;"	f	class:NNode	signature:()
NNode::GetNonScaleMatrix	NNode.hpp	/^	virtual glm::mat4 GetNonScaleMatrix();$/;"	p	class:NNode	access:public	signature:()
NNode::GetParent	NNode.cpp	/^NNode* NNode::GetParent()$/;"	f	class:NNode	signature:()
NNode::GetParent	NNode.hpp	/^	virtual NNode* GetParent();$/;"	p	class:NNode	access:public	signature:()
NNode::GetPos	NNode.cpp	/^glm::vec2 NNode::GetPos()$/;"	f	class:NNode	signature:()
NNode::GetPos	NNode.hpp	/^	virtual glm::vec2 GetPos();$/;"	p	class:NNode	access:public	signature:()
NNode::GetScale	NNode.cpp	/^glm::vec2 NNode::GetScale()$/;"	f	class:NNode	signature:()
NNode::GetScale	NNode.hpp	/^	virtual glm::vec2 GetScale();$/;"	p	class:NNode	access:public	signature:()
NNode::Matrix	NNode.hpp	/^	glm::mat4 Matrix;$/;"	m	class:NNode	access:private
NNode::NNode	NNode.cpp	/^NNode::NNode()$/;"	f	class:NNode	signature:()
NNode::NNode	NNode.hpp	/^	NNode();$/;"	p	class:NNode	access:public	signature:()
NNode::Parent	NNode.hpp	/^	NNode* Parent;$/;"	m	class:NNode	access:private
NNode::Position	NNode.hpp	/^	glm::vec2 Position;$/;"	m	class:NNode	access:private
NNode::RemoveChild	NNode.cpp	/^void NNode::RemoveChild(NNode* Node)$/;"	f	class:NNode	signature:(NNode* Node)
NNode::RemoveChild	NNode.hpp	/^	virtual void RemoveChild(NNode* Child);$/;"	p	class:NNode	access:public	signature:(NNode* Child)
NNode::Scale	NNode.hpp	/^	glm::vec2 Scale;$/;"	m	class:NNode	access:private
NNode::SetAng	NNode.cpp	/^void NNode::SetAng(float i_Angle)$/;"	f	class:NNode	signature:(float i_Angle)
NNode::SetAng	NNode.hpp	/^	virtual void SetAng(float i_Angle);$/;"	p	class:NNode	access:public	signature:(float i_Angle)
NNode::SetColor	NNode.cpp	/^void NNode::SetColor(float R, float G, float B)$/;"	f	class:NNode	signature:(float R, float G, float B)
NNode::SetColor	NNode.cpp	/^void NNode::SetColor(float R, float G, float B, float A)$/;"	f	class:NNode	signature:(float R, float G, float B, float A)
NNode::SetColor	NNode.cpp	/^void NNode::SetColor(glm::vec3 i_Color)$/;"	f	class:NNode	signature:(glm::vec3 i_Color)
NNode::SetColor	NNode.cpp	/^void NNode::SetColor(glm::vec4 i_Color)$/;"	f	class:NNode	signature:(glm::vec4 i_Color)
NNode::SetColor	NNode.hpp	/^	virtual void SetColor(float R, float G, float B);$/;"	p	class:NNode	access:public	signature:(float R, float G, float B)
NNode::SetColor	NNode.hpp	/^	virtual void SetColor(float R, float G, float B, float A);$/;"	p	class:NNode	access:public	signature:(float R, float G, float B, float A)
NNode::SetColor	NNode.hpp	/^	virtual void SetColor(glm::vec3 i_Color);$/;"	p	class:NNode	access:public	signature:(glm::vec3 i_Color)
NNode::SetColor	NNode.hpp	/^	virtual void SetColor(glm::vec4 i_Color);$/;"	p	class:NNode	access:public	signature:(glm::vec4 i_Color)
NNode::SetParent	NNode.cpp	/^void NNode::SetParent(NNode* Node)$/;"	f	class:NNode	signature:(NNode* Node)
NNode::SetParent	NNode.hpp	/^	virtual void SetParent(NNode* i_Parent);$/;"	p	class:NNode	access:public	signature:(NNode* i_Parent)
NNode::SetPos	NNode.cpp	/^void NNode::SetPos(float X, float Y)$/;"	f	class:NNode	signature:(float X, float Y)
NNode::SetPos	NNode.cpp	/^void NNode::SetPos(glm::vec2 i_Position)$/;"	f	class:NNode	signature:(glm::vec2 i_Position)
NNode::SetPos	NNode.hpp	/^	virtual void SetPos(float X,float Y);$/;"	p	class:NNode	access:public	signature:(float X,float Y)
NNode::SetPos	NNode.hpp	/^	virtual void SetPos(glm::vec2 i_Position);$/;"	p	class:NNode	access:public	signature:(glm::vec2 i_Position)
NNode::SetScale	NNode.cpp	/^void NNode::SetScale(float W, float H)$/;"	f	class:NNode	signature:(float W, float H)
NNode::SetScale	NNode.cpp	/^void NNode::SetScale(float i_Scale)$/;"	f	class:NNode	signature:(float i_Scale)
NNode::SetScale	NNode.cpp	/^void NNode::SetScale(glm::vec2 i_Scale)$/;"	f	class:NNode	signature:(glm::vec2 i_Scale)
NNode::SetScale	NNode.hpp	/^	virtual void SetScale(float W, float H);$/;"	p	class:NNode	access:public	signature:(float W, float H)
NNode::SetScale	NNode.hpp	/^	virtual void SetScale(float i_Scale);$/;"	p	class:NNode	access:public	signature:(float i_Scale)
NNode::SetScale	NNode.hpp	/^	virtual void SetScale(glm::vec2 i_Scale);$/;"	p	class:NNode	access:public	signature:(glm::vec2 i_Scale)
NNode::SwapDepth	NNode.cpp	/^void NNode::SwapDepth(unsigned int Depth)$/;"	f	class:NNode	signature:(unsigned int Depth)
NNode::SwapDepth	NNode.hpp	/^	virtual void SwapDepth(unsigned int Depth);$/;"	p	class:NNode	access:public	signature:(unsigned int Depth)
NNode::Tick	NNode.cpp	/^void NNode::Tick(double DT) {}$/;"	f	class:NNode	signature:(double DT)
NNode::Tick	NNode.hpp	/^	virtual void Tick(double DT);$/;"	p	class:NNode	access:public	signature:(double DT)
NNode::UpdateMatrix	NNode.cpp	/^void NNode::UpdateMatrix()$/;"	f	class:NNode	signature:()
NNode::UpdateMatrix	NNode.hpp	/^	virtual void UpdateMatrix();$/;"	p	class:NNode	access:public	signature:()
NNode::~NNode	NNode.cpp	/^NNode::~NNode()$/;"	f	class:NNode	signature:()
NNode::~NNode	NNode.hpp	/^	~NNode();$/;"	p	class:NNode	access:public	signature:()
NRender	NRender.cpp	/^NRender::NRender()$/;"	f	class:NRender
NRender	NRender.hpp	/^	NRender();$/;"	p	class:NRender	access:public	signature:()
NRender	NRender.hpp	/^class NRender$/;"	c
NRender::AddCachedTexture	NRender.hpp	/^	void AddCachedTexture(GLuint ID);$/;"	p	class:NRender	access:public	signature:(GLuint ID)
NRender::AddTexture	NRender.hpp	/^	void AddTexture(NTexture* Texture);$/;"	p	class:NRender	access:public	signature:(NTexture* Texture)
NRender::CachedTextures	NRender.hpp	/^	std::vector<NCachedTexture*> CachedTextures;$/;"	m	class:NRender	access:private
NRender::Camera	NRender.hpp	/^	NCamera* Camera;$/;"	m	class:NRender	access:private
NRender::Draw	NRender.hpp	/^	void Draw();$/;"	p	class:NRender	access:public	signature:()
NRender::FPS	NRender.hpp	/^	unsigned int FPS;$/;"	m	class:NRender	access:private
NRender::FrameTime	NRender.hpp	/^	double FrameTime;$/;"	m	class:NRender	access:private
NRender::GetCachedTexture	NRender.hpp	/^	NCachedTexture* GetCachedTexture(std::string Name);$/;"	p	class:NRender	access:public	signature:(std::string Name)
NRender::GetCamera	NRender.hpp	/^	NCamera* GetCamera();$/;"	p	class:NRender	access:public	signature:()
NRender::GetFrameTime	NRender.hpp	/^	double GetFrameTime();$/;"	p	class:NRender	access:public	signature:()
NRender::GetShader	NRender.hpp	/^	NShader* GetShader(std::string Name);$/;"	p	class:NRender	access:public	signature:(std::string Name)
NRender::GetTexture	NRender.hpp	/^	NTexture* GetTexture(std::string Name);$/;"	p	class:NRender	access:public	signature:(std::string Name)
NRender::GetTextureFilter	NRender.hpp	/^	GLuint GetTextureFilter();$/;"	p	class:NRender	access:public	signature:()
NRender::GetVSync	NRender.hpp	/^	bool GetVSync();$/;"	p	class:NRender	access:public	signature:()
NRender::LastTime	NRender.hpp	/^	double LastTime;$/;"	m	class:NRender	access:private
NRender::LoadShaders	NRender.hpp	/^	bool LoadShaders();$/;"	p	class:NRender	access:public	signature:()
NRender::MaxFPS	NRender.hpp	/^	float MaxFPS;$/;"	m	class:NRender	access:private
NRender::NRender	NRender.hpp	/^	NRender();$/;"	p	class:NRender	access:public	signature:()
NRender::SetCamera	NRender.hpp	/^	void SetCamera(NCamera* Camera);$/;"	p	class:NRender	access:public	signature:(NCamera* Camera)
NRender::SetTextureFilter	NRender.hpp	/^	void SetTextureFilter(GLuint Param);$/;"	p	class:NRender	access:public	signature:(GLuint Param)
NRender::SetVSync	NRender.hpp	/^	void SetVSync(bool i_VSync);$/;"	p	class:NRender	access:public	signature:(bool i_VSync)
NRender::Shaders	NRender.hpp	/^	std::vector<NShader*> Shaders;$/;"	m	class:NRender	access:private
NRender::TextureFilter	NRender.hpp	/^	GLuint TextureFilter;$/;"	m	class:NRender	access:private
NRender::Textures	NRender.hpp	/^	std::vector<NTexture*> Textures;$/;"	m	class:NRender	access:private
NRender::VSync	NRender.hpp	/^	bool VSync;$/;"	m	class:NRender	access:private
NRender::~NRender	NRender.hpp	/^	~NRender();$/;"	p	class:NRender	access:public	signature:()
NScene	NScene.cpp	/^NScene::NScene()$/;"	f	class:NScene
NScene	NScene.hpp	/^class NScene$/;"	c
NShader	NShader.cpp	/^NShader::NShader(std::string i_Name)$/;"	f	class:NShader	signature:(std::string i_Name)
NShader	NShader.hpp	/^	NShader(std::string Name);$/;"	p	class:NShader	access:public	signature:(std::string Name)
NShader	NShader.hpp	/^class NShader$/;"	c
NShader::GetID	NShader.cpp	/^GLuint NShader::GetID()$/;"	f	class:NShader	signature:()
NShader::GetID	NShader.hpp	/^	GLuint GetID();$/;"	p	class:NShader	access:public	signature:()
NShader::GetName	NShader.cpp	/^std::string NShader::GetName()$/;"	f	class:NShader	signature:()
NShader::GetName	NShader.hpp	/^	std::string GetName();$/;"	p	class:NShader	access:public	signature:()
NShader::GetUniformLocation	NShader.cpp	/^GLuint NShader::GetUniformLocation(std::string i_Name)$/;"	f	class:NShader	signature:(std::string i_Name)
NShader::GetUniformLocation	NShader.hpp	/^	GLuint GetUniformLocation(std::string i_Name);$/;"	p	class:NShader	access:public	signature:(std::string i_Name)
NShader::Load	NShader.cpp	/^bool NShader::Load(std::string VertexFilePath, std::string FragmentFilePath)$/;"	f	class:NShader	signature:(std::string VertexFilePath, std::string FragmentFilePath)
NShader::Load	NShader.hpp	/^	bool Load(std::string VertexShaderPath,std::string FragmentShaderPath);$/;"	p	class:NShader	access:public	signature:(std::string VertexShaderPath,std::string FragmentShaderPath)
NShader::NShader	NShader.cpp	/^NShader::NShader(std::string i_Name)$/;"	f	class:NShader	signature:(std::string i_Name)
NShader::NShader	NShader.hpp	/^	NShader(std::string Name);$/;"	p	class:NShader	access:public	signature:(std::string Name)
NShader::Name	NShader.hpp	/^	std::string Name;$/;"	m	class:NShader	access:private
NShader::ProgramID	NShader.hpp	/^	GLuint ProgramID;$/;"	m	class:NShader	access:private
NShader::Uniforms	NShader.hpp	/^	std::vector<NUniform*> Uniforms;$/;"	m	class:NShader	access:private
NShader::~NShader	NShader.cpp	/^NShader::~NShader()$/;"	f	class:NShader	signature:()
NShader::~NShader	NShader.hpp	/^	~NShader();$/;"	p	class:NShader	access:public	signature:()
NText	NText.cpp	/^NText::NText(std::string i_Face, std::string i_Data) : NNode()$/;"	f	class:NText
NText	NText.hpp	/^class NText : public NNode$/;"	c
NTextSystem	NText.cpp	/^NTextSystem::NTextSystem()$/;"	f	class:NTextSystem
NTextSystem	NText.hpp	/^class NTextSystem$/;"	c
NTexture	NTexture.cpp	/^NTexture::NTexture(NTexture* Texture)$/;"	f	class:NTexture	signature:(NTexture* Texture)
NTexture	NTexture.cpp	/^NTexture::NTexture(std::string i_Name)$/;"	f	class:NTexture	signature:(std::string i_Name)
NTexture	NTexture.hpp	/^	NTexture(NTexture* Texture);$/;"	p	class:NTexture	access:public	signature:(NTexture* Texture)
NTexture	NTexture.hpp	/^	NTexture(std::string i_Name);$/;"	p	class:NTexture	access:public	signature:(std::string i_Name)
NTexture	NTexture.hpp	/^class NTexture$/;"	c
NTexture::AddAnimation	NTexture.cpp	/^void NTexture::AddAnimation(NAnimation* Animation)$/;"	f	class:NTexture	signature:(NAnimation* Animation)
NTexture::AddAnimation	NTexture.hpp	/^	void AddAnimation(NAnimation* Animation);$/;"	p	class:NTexture	access:public	signature:(NAnimation* Animation)
NTexture::Animations	NTexture.hpp	/^	std::vector<NAnimation*> Animations;$/;"	m	class:NTexture	access:private
NTexture::CurrentTime	NTexture.hpp	/^	double CurrentTime;$/;"	m	class:NTexture	access:private
NTexture::GetFloat	NTexture.cpp	/^float NTexture::GetFloat(std::string i_Name)$/;"	f	class:NTexture	signature:(std::string i_Name)
NTexture::GetFloat	NTexture.hpp	/^	float GetFloat(std::string i_Name);$/;"	p	class:NTexture	access:public	signature:(std::string i_Name)
NTexture::GetID	NTexture.cpp	/^GLuint NTexture::GetID()$/;"	f	class:NTexture	signature:()
NTexture::GetID	NTexture.hpp	/^	GLuint GetID();$/;"	p	class:NTexture	access:public	signature:()
NTexture::GetSize	NTexture.cpp	/^glm::vec2 NTexture::GetSize()$/;"	f	class:NTexture	signature:()
NTexture::GetSize	NTexture.hpp	/^	glm::vec2 GetSize();$/;"	p	class:NTexture	access:public	signature:()
NTexture::NTexture	NTexture.cpp	/^NTexture::NTexture(NTexture* Texture)$/;"	f	class:NTexture	signature:(NTexture* Texture)
NTexture::NTexture	NTexture.cpp	/^NTexture::NTexture(std::string i_Name)$/;"	f	class:NTexture	signature:(std::string i_Name)
NTexture::NTexture	NTexture.hpp	/^	NTexture(NTexture* Texture);$/;"	p	class:NTexture	access:public	signature:(NTexture* Texture)
NTexture::NTexture	NTexture.hpp	/^	NTexture(std::string i_Name);$/;"	p	class:NTexture	access:public	signature:(std::string i_Name)
NTexture::Name	NTexture.hpp	/^	std::string Name;$/;"	m	class:NTexture	access:public
NTexture::Play	NTexture.cpp	/^void NTexture::Play(std::string i_Name)$/;"	f	class:NTexture	signature:(std::string i_Name)
NTexture::Play	NTexture.hpp	/^	void Play(std::string i_Name);$/;"	p	class:NTexture	access:public	signature:(std::string i_Name)
NTexture::PlayingAnimation	NTexture.hpp	/^	unsigned int PlayingAnimation;$/;"	m	class:NTexture	access:private
NTexture::Tick	NTexture.cpp	/^void NTexture::Tick(double DT)$/;"	f	class:NTexture	signature:(double DT)
NTexture::Tick	NTexture.hpp	/^	void Tick(double DT);$/;"	p	class:NTexture	access:public	signature:(double DT)
NTexture::~NTexture	NTexture.cpp	/^NTexture::~NTexture()$/;"	f	class:NTexture	signature:()
NTexture::~NTexture	NTexture.hpp	/^	~NTexture();$/;"	p	class:NTexture	access:public	signature:()
NTextureAtlas	NText.cpp	/^NTextureAtlas::NTextureAtlas(FT_Face Face, unsigned int i_Size)$/;"	f	class:NTextureAtlas
NTextureAtlas	NText.hpp	/^class NTextureAtlas$/;"	c
NTile	NMap.cpp	/^NTile::NTile()$/;"	f	class:NTile
NTile	NMap.hpp	/^class NTile$/;"	c
NUniform	NShader.cpp	/^NUniform::NUniform(GLuint ProgramID, std::string i_Name)$/;"	f	class:NUniform	signature:(GLuint ProgramID, std::string i_Name)
NUniform	NShader.hpp	/^	NUniform(GLuint ProgramID,std::string Name);$/;"	p	class:NUniform	access:public	signature:(GLuint ProgramID,std::string Name)
NUniform	NShader.hpp	/^class NUniform$/;"	c
NUniform::GetName	NShader.cpp	/^std::string NUniform::GetName()$/;"	f	class:NUniform	signature:()
NUniform::GetName	NShader.hpp	/^	std::string GetName();$/;"	p	class:NUniform	access:public	signature:()
NUniform::GetUniformLocation	NShader.cpp	/^GLuint NUniform::GetUniformLocation()$/;"	f	class:NUniform	signature:()
NUniform::GetUniformLocation	NShader.hpp	/^	GLuint GetUniformLocation();$/;"	p	class:NUniform	access:public	signature:()
NUniform::NUniform	NShader.cpp	/^NUniform::NUniform(GLuint ProgramID, std::string i_Name)$/;"	f	class:NUniform	signature:(GLuint ProgramID, std::string i_Name)
NUniform::NUniform	NShader.hpp	/^	NUniform(GLuint ProgramID,std::string Name);$/;"	p	class:NUniform	access:public	signature:(GLuint ProgramID,std::string Name)
NUniform::Name	NShader.hpp	/^	std::string Name;$/;"	m	class:NUniform	access:private
NUniform::UniLoc	NShader.hpp	/^	GLuint UniLoc;$/;"	m	class:NUniform	access:private
NUniform::~NUniform	NShader.hpp	/^	~NUniform();$/;"	p	class:NUniform	access:public	signature:()
NWindow	NWindow.cpp	/^NWindow::NWindow()$/;"	f	class:NWindow	signature:()
NWindow	NWindow.hpp	/^	NWindow();$/;"	p	class:NWindow	access:public	signature:()
NWindow	NWindow.hpp	/^class NWindow : public NNode$/;"	c	inherits:NNode
NWindow::BorderSize	NWindow.hpp	/^	float BorderSize;$/;"	m	class:NWindow	access:private
NWindow::Buffers	NWindow.hpp	/^	GLuint* Buffers;$/;"	m	class:NWindow	access:private
NWindow::Changed	NWindow.hpp	/^	bool Changed;$/;"	m	class:NWindow	access:private
NWindow::ColorLoc	NWindow.hpp	/^	GLuint ColorLoc;$/;"	m	class:NWindow	access:private
NWindow::Draw	NWindow.cpp	/^void NWindow::Draw(glm::mat4 View)$/;"	f	class:NWindow	signature:(glm::mat4 View)
NWindow::Draw	NWindow.hpp	/^	void Draw(glm::mat4 View);$/;"	p	class:NWindow	access:public	signature:(glm::mat4 View)
NWindow::GenerateBuffers	NWindow.cpp	/^void NWindow::GenerateBuffers()$/;"	f	class:NWindow	signature:()
NWindow::GenerateBuffers	NWindow.hpp	/^	void GenerateBuffers();$/;"	p	class:NWindow	access:private	signature:()
NWindow::MatrixLoc	NWindow.hpp	/^	GLuint MatrixLoc;$/;"	m	class:NWindow	access:private
NWindow::NWindow	NWindow.cpp	/^NWindow::NWindow()$/;"	f	class:NWindow	signature:()
NWindow::NWindow	NWindow.hpp	/^	NWindow();$/;"	p	class:NWindow	access:public	signature:()
NWindow::ScreenLoc	NWindow.hpp	/^	GLuint ScreenLoc;$/;"	m	class:NWindow	access:private
NWindow::SetTexture	NWindow.cpp	/^void NWindow::SetTexture(std::string Name)$/;"	f	class:NWindow	signature:(std::string Name)
NWindow::SetTexture	NWindow.hpp	/^	void SetTexture(std::string Name);$/;"	p	class:NWindow	access:public	signature:(std::string Name)
NWindow::Shader	NWindow.hpp	/^	NShader* Shader;$/;"	m	class:NWindow	access:private
NWindow::SizeMem	NWindow.hpp	/^	glm::vec2 SizeMem;$/;"	m	class:NWindow	access:private
NWindow::Texture	NWindow.hpp	/^	NTexture* Texture;$/;"	m	class:NWindow	access:public
NWindow::TextureLoc	NWindow.hpp	/^	GLuint TextureLoc;$/;"	m	class:NWindow	access:private
NWindow::Tick	NWindow.cpp	/^void NWindow::Tick(double DT)$/;"	f	class:NWindow	signature:(double DT)
NWindow::Tick	NWindow.hpp	/^	void Tick(double DT);$/;"	p	class:NWindow	access:public	signature:(double DT)
NWindow::UVs	NWindow.hpp	/^	std::vector<glm::vec2> UVs;$/;"	m	class:NWindow	access:private
NWindow::Verts	NWindow.hpp	/^	std::vector<glm::vec2> Verts;$/;"	m	class:NWindow	access:private
NWindow::~NWindow	NWindow.cpp	/^NWindow::~NWindow()$/;"	f	class:NWindow	signature:()
NWindow::~NWindow	NWindow.hpp	/^	~NWindow();$/;"	p	class:NWindow	access:public	signature:()
Name	NRender.hpp	/^	std::string Name;$/;"	m	class:NCachedTexture	access:public
Name	NShader.cpp	/^	std::cout << "Linking program \\"" << Name << "\\"\\n";$/;"	l
Name	NShader.hpp	/^	std::string Name;$/;"	m	class:NShader	access:private
Name	NShader.hpp	/^	std::string Name;$/;"	m	class:NUniform	access:private
Name	NText.hpp	/^	std::string Name;$/;"	m	class:NFace
Name	NTexture.cpp	/^	std::cout << "Animation " << i_Name << " not found in texture " << Name << "\\n";$/;"	l
Name	NTexture.hpp	/^	std::string Name;$/;"	m	class:NAnimation	access:private
Name	NTexture.hpp	/^	std::string Name;$/;"	m	class:NTexture	access:public
NewFiles	NLua.cpp	/^		std::vector<std::string> NewFiles = GetFiles(Folders[i]);$/;"	l
NewFiles	NLua.cpp	/^	std::vector<std::string> NewFiles = GetFiles(Folder);$/;"	l
NewHeight	NGame.hpp	/^	int NewHeight;$/;"	m	class:NGame
NewUniform	NShader.cpp	/^	NUniform* NewUniform = new NUniform(GetID(), i_Name);$/;"	l
NewWidth	NGame.hpp	/^	int NewWidth;$/;"	m	class:NGame
Nodes	NScene.hpp	/^	std::vector<NNode*> Nodes;$/;"	m	class:NScene
Number	NConfig.cpp	/^	float Number = lua_tonumber(L,-1);$/;"	l
Number	NTexture.cpp	/^	float Number = lua_tonumber(L,-1);$/;"	l
OrthoMatrix	NCamera.hpp	/^	glm::mat4 OrthoMatrix;$/;"	m	class:NCamera
PACKAGE_BUGREPORT	config.h	44;"	d
PACKAGE_NAME	config.h	47;"	d
PACKAGE_STRING	config.h	50;"	d
PACKAGE_TARNAME	config.h	53;"	d
PACKAGE_URL	config.h	56;"	d
PACKAGE_VERSION	config.h	59;"	d
Parent	NNode.hpp	/^	NNode* Parent;$/;"	m	class:NNode	access:private
ParentFolder	NLua.cpp	/^	std::string ParentFolder = Folder;$/;"	l
PerspMatrix	NCamera.hpp	/^	glm::mat4 PerspMatrix;$/;"	m	class:NCamera
Play	NTexture.cpp	/^void NTexture::Play(std::string i_Name)$/;"	f	class:NTexture	signature:(std::string i_Name)
Play	NTexture.hpp	/^	void Play(std::string i_Name);$/;"	p	class:NTexture	access:public	signature:(std::string i_Name)
PlayingAnimation	NTexture.hpp	/^	unsigned int PlayingAnimation;$/;"	m	class:NTexture	access:private
Pointer	NTexture.cpp	/^	NAnimation** Pointer = (NAnimation**)lua_newuserdata(L,sizeof(NAnimation*));$/;"	l
Poll	NGame.cpp	/^void NGame::Poll()$/;"	f	class:NGame
Poll	NInput.cpp	/^void NInput::Poll()$/;"	f	class:NInput	signature:()
Poll	NInput.hpp	/^	void Poll();$/;"	p	class:NInput	access:public	signature:()
Pos	NNode.cpp	/^	glm::mat4 Pos = glm::translate(glm::mat4(),glm::vec3(Position,0));$/;"	l
Position	NNode.hpp	/^	glm::vec2 Position;$/;"	m	class:NNode	access:private
ProgramErrorMessage	NShader.cpp	/^		std::cout << &ProgramErrorMessage[0] << "\\n";$/;"	l
ProgramErrorMessage	NShader.cpp	/^	std::vector<char> ProgramErrorMessage(InfoLogLength);$/;"	p	file:	signature:(InfoLogLength)
ProgramID	NShader.hpp	/^	GLuint ProgramID;$/;"	m	class:NShader	access:private
RFolders	NLua.cpp	/^		std::vector<std::string> RFolders = GetDir(Folders[i], ParentDirectory);$/;"	l
Rand	NEngine.cpp	/^float Rand(float Min, float Max)$/;"	f	signature:(float Min, float Max)
Rand	NEngine.hpp	/^float Rand(float Min, float Max);$/;"	p	signature:(float Min, float Max)
Red	NColor.hpp	12;"	d
Reference	NTexture.hpp	/^	int Reference;$/;"	m	class:NAnimation	access:public
Remove	NMap.cpp	/^void NMap::Remove()$/;"	f	class:NMap
Remove	NText.cpp	/^void NText::Remove()$/;"	f	class:NText
RemoveChild	NNode.cpp	/^		Parent->RemoveChild(this);$/;"	p	file:	signature:(this)
RemoveChild	NNode.cpp	/^void NNode::RemoveChild(NNode* Node)$/;"	f	class:NNode	signature:(NNode* Node)
RemoveChild	NNode.hpp	/^	virtual void RemoveChild(NNode* Child);$/;"	p	class:NNode	access:public	signature:(NNode* Child)
Render	NGame.hpp	/^	NRender* Render;$/;"	m	class:NGame
Rendered	NText.hpp	/^	bool Rendered;$/;"	m	class:NGlyph
ResizeWindow	NGame.cpp	/^void ResizeWindow(int W, int H)$/;"	f
Result	NLua.cpp	/^	bool Result = Success;$/;"	l
Result	NShader.cpp	/^	GLint Result;$/;"	l
ReturnBool	NConfig.cpp	/^	bool ReturnBool = (bool)lua_toboolean(L,-1);$/;"	l
ReturnString	NConfig.cpp	/^	std::string ReturnString = Text;$/;"	l
Run	NGame.hpp	/^	bool Run;$/;"	m	class:NGame
Running	NGame.cpp	/^bool NGame::Running()$/;"	f	class:NGame
STDC_HEADERS	config.h	62;"	d
SX	NButton.cpp	/^		float SX = BorderSize\/GetScale().x;$/;"	l
SX	NWindow.cpp	/^		float SX = BorderSize\/GetScale().x;$/;"	l
SY	NButton.cpp	/^		float SY = BorderSize\/GetScale().y;$/;"	l
SY	NWindow.cpp	/^		float SY = BorderSize\/GetScale().y;$/;"	l
Sca	NNode.cpp	/^	glm::mat4 Sca = glm::scale(glm::mat4(),glm::vec3(Scale,1));$/;"	l
Scale	NNode.hpp	/^	glm::vec2 Scale;$/;"	m	class:NNode	access:private
Scene	NGame.hpp	/^	NScene* Scene;$/;"	m	class:NGame
ScreenLoc	NButton.hpp	/^	GLuint ScreenLoc;$/;"	m	class:NButton	access:private
ScreenLoc	NText.hpp	/^	GLuint ColorLoc,TextureLoc,MatrixLoc,ScreenLoc;$/;"	m	class:NText
ScreenLoc	NWindow.hpp	/^	GLuint ScreenLoc;$/;"	m	class:NWindow	access:private
SetAng	NNode.cpp	/^void NNode::SetAng(float i_Angle)$/;"	f	class:NNode	signature:(float i_Angle)
SetAng	NNode.hpp	/^	virtual void SetAng(float i_Angle);$/;"	p	class:NNode	access:public	signature:(float i_Angle)
SetAtlas	NText.cpp	/^void NGlyph::SetAtlas(float Width, float Height)$/;"	f	class:NGlyph
SetCamera	NRender.cpp	/^void NRender::SetCamera(NCamera* i_Camera)$/;"	f	class:NRender
SetCamera	NRender.hpp	/^	void SetCamera(NCamera* Camera);$/;"	p	class:NRender	access:public	signature:(NCamera* Camera)
SetColor	NColor.cpp	/^void SetColor(unsigned int Color) {}$/;"	f	signature:(unsigned int Color)
SetColor	NColor.cpp	/^void SetColor(unsigned int Color)$/;"	f	signature:(unsigned int Color)
SetColor	NColor.hpp	/^void SetColor(unsigned int Color);$/;"	p	signature:(unsigned int Color)
SetColor	NNode.cpp	/^void NNode::SetColor(float R, float G, float B)$/;"	f	class:NNode	signature:(float R, float G, float B)
SetColor	NNode.cpp	/^void NNode::SetColor(float R, float G, float B, float A)$/;"	f	class:NNode	signature:(float R, float G, float B, float A)
SetColor	NNode.cpp	/^void NNode::SetColor(glm::vec3 i_Color)$/;"	f	class:NNode	signature:(glm::vec3 i_Color)
SetColor	NNode.cpp	/^void NNode::SetColor(glm::vec4 i_Color)$/;"	f	class:NNode	signature:(glm::vec4 i_Color)
SetColor	NNode.hpp	/^	virtual void SetColor(float R, float G, float B);$/;"	p	class:NNode	access:public	signature:(float R, float G, float B)
SetColor	NNode.hpp	/^	virtual void SetColor(float R, float G, float B, float A);$/;"	p	class:NNode	access:public	signature:(float R, float G, float B, float A)
SetColor	NNode.hpp	/^	virtual void SetColor(glm::vec3 i_Color);$/;"	p	class:NNode	access:public	signature:(glm::vec3 i_Color)
SetColor	NNode.hpp	/^	virtual void SetColor(glm::vec4 i_Color);$/;"	p	class:NNode	access:public	signature:(glm::vec4 i_Color)
SetFilter	NRender.cpp	/^void NCachedTexture::SetFilter(GLuint Filter)$/;"	f	class:NCachedTexture
SetFilter	NRender.hpp	/^	void SetFilter(GLuint);$/;"	p	class:NCachedTexture	access:public	signature:(GLuint)
SetMode	NText.cpp	/^void NText::SetMode(int i_Mode)$/;"	f	class:NText
SetName	NTexture.cpp	/^void NAnimation::SetName(std::string i_Name)$/;"	f	class:NAnimation	signature:(std::string i_Name)
SetName	NTexture.hpp	/^	void SetName(std::string i_Name);$/;"	p	class:NAnimation	access:public	signature:(std::string i_Name)
SetParent	NButton.cpp	/^		DisplayText->SetParent(this);$/;"	p	file:	signature:(this)
SetParent	NNode.cpp	/^			Children[i]->SetParent(NULL);$/;"	p	file:	signature:(NULL)
SetParent	NNode.cpp	/^void NNode::SetParent(NNode* Node)$/;"	f	class:NNode	signature:(NNode* Node)
SetParent	NNode.hpp	/^	virtual void SetParent(NNode* i_Parent);$/;"	p	class:NNode	access:public	signature:(NNode* i_Parent)
SetPos	NNode.cpp	/^void NNode::SetPos(float X, float Y)$/;"	f	class:NNode	signature:(float X, float Y)
SetPos	NNode.cpp	/^void NNode::SetPos(glm::vec2 i_Position)$/;"	f	class:NNode	signature:(glm::vec2 i_Position)
SetPos	NNode.hpp	/^	virtual void SetPos(float X,float Y);$/;"	p	class:NNode	access:public	signature:(float X,float Y)
SetPos	NNode.hpp	/^	virtual void SetPos(glm::vec2 i_Position);$/;"	p	class:NNode	access:public	signature:(glm::vec2 i_Position)
SetScale	NNode.cpp	/^void NNode::SetScale(float W, float H)$/;"	f	class:NNode	signature:(float W, float H)
SetScale	NNode.cpp	/^void NNode::SetScale(float i_Scale)$/;"	f	class:NNode	signature:(float i_Scale)
SetScale	NNode.cpp	/^void NNode::SetScale(glm::vec2 i_Scale)$/;"	f	class:NNode	signature:(glm::vec2 i_Scale)
SetScale	NNode.hpp	/^	virtual void SetScale(float W, float H);$/;"	p	class:NNode	access:public	signature:(float W, float H)
SetScale	NNode.hpp	/^	virtual void SetScale(float i_Scale);$/;"	p	class:NNode	access:public	signature:(float i_Scale)
SetScale	NNode.hpp	/^	virtual void SetScale(glm::vec2 i_Scale);$/;"	p	class:NNode	access:public	signature:(glm::vec2 i_Scale)
SetSize	NRender.cpp	/^void NRender::SetSize(float Width, float Height)$/;"	f	class:NRender
SetSize	NRender.cpp	/^void NRender::SetSize(glm::vec2 i_Size)$/;"	f	class:NRender
SetSize	NText.cpp	/^void NText::SetSize(float i_Size)$/;"	f	class:NText
SetText	NButton.cpp	/^	DisplayText->SetText(Text);$/;"	p	file:	signature:(Text)
SetText	NButton.cpp	/^void NButton::SetText(std::string Text)$/;"	f	class:NButton	signature:(std::string Text)
SetText	NButton.hpp	/^	void SetText(std::string Text);$/;"	p	class:NButton	access:public	signature:(std::string Text)
SetText	NText.cpp	/^void NText::SetText(std::string i_Data)$/;"	f	class:NText
SetTexture	NButton.cpp	/^void NButton::SetTexture(std::string Name)$/;"	f	class:NButton	signature:(std::string Name)
SetTexture	NButton.hpp	/^	void SetTexture(std::string Name);$/;"	p	class:NButton	access:public	signature:(std::string Name)
SetTexture	NWindow.cpp	/^void NWindow::SetTexture(std::string Name)$/;"	f	class:NWindow	signature:(std::string Name)
SetTexture	NWindow.hpp	/^	void SetTexture(std::string Name);$/;"	p	class:NWindow	access:public	signature:(std::string Name)
SetTextureFilter	NRender.cpp	/^void NRender::SetTextureFilter(GLuint Filter)$/;"	f	class:NRender
SetTextureFilter	NRender.hpp	/^	void SetTextureFilter(GLuint Param);$/;"	p	class:NRender	access:public	signature:(GLuint Param)
SetVSync	NRender.cpp	/^void NRender::SetVSync(bool i_VSync)$/;"	f	class:NRender
SetVSync	NRender.hpp	/^	void SetVSync(bool i_VSync);$/;"	p	class:NRender	access:public	signature:(bool i_VSync)
SetWindowChanged	NGame.cpp	/^void NGame::SetWindowChanged(bool Changed)$/;"	f	class:NGame
SetWindowSize	NGame.cpp	/^void NGame::SetWindowSize(int W, int H)$/;"	f	class:NGame
Shader	NButton.hpp	/^	NShader* Shader;$/;"	m	class:NButton	access:private
Shader	NMap.hpp	/^	NShader* Shader;$/;"	m	class:NMap
Shader	NText.hpp	/^	NShader* Shader;$/;"	m	class:NText
Shader	NWindow.hpp	/^	NShader* Shader;$/;"	m	class:NWindow	access:private
Shaders	NRender.hpp	/^	std::vector<NShader*> Shaders;$/;"	m	class:NRender	access:private
Size	NText.hpp	/^	float Size;$/;"	m	class:NText
Size	NText.hpp	/^	int Size;$/;"	m	class:NTextureAtlas
SizeMem	NWindow.hpp	/^	glm::vec2 SizeMem;$/;"	m	class:NWindow	access:private
SoundSystem	NGame.hpp	/^	NSoundSystem* SoundSystem;$/;"	m	class:NGame
Source	NLua.cpp	/^	std::string Source = ar2.source;$/;"	l
Success	NEngine.hpp	71;"	d
SwapDepth	NNode.cpp	/^void NNode::SwapDepth(unsigned int Depth)$/;"	f	class:NNode	signature:(unsigned int Depth)
SwapDepth	NNode.hpp	/^	virtual void SwapDepth(unsigned int Depth);$/;"	p	class:NNode	access:public	signature:(unsigned int Depth)
Text	NConfig.cpp	/^	const char* Text = lua_tostring(L,-1);$/;"	l
TextSystem	NGame.hpp	/^	NTextSystem* TextSystem;$/;"	m	class:NGame
Texture	NButton.hpp	/^	NTexture* Texture;$/;"	m	class:NButton	access:public
Texture	NMap.hpp	/^	NTexture* Texture;$/;"	m	class:NMap
Texture	NText.hpp	/^	GLuint Texture;$/;"	m	class:NTextureAtlas
Texture	NTexture.cpp	/^	NTexture* Texture = new NTexture(luaL_checkstring(L,1));$/;"	l
Texture	NWindow.hpp	/^	NTexture* Texture;$/;"	m	class:NWindow	access:public
TextureFilter	NRender.hpp	/^	GLuint TextureFilter;$/;"	m	class:NRender	access:private
TextureHeight	NMap.hpp	/^	unsigned int TextureHeight;$/;"	m	class:NMap
TextureLoc	NButton.hpp	/^	GLuint TextureLoc;$/;"	m	class:NButton	access:private
TextureLoc	NMap.hpp	/^	GLuint ColorLoc, MatrixLoc, TextureLoc;$/;"	m	class:NMap
TextureLoc	NText.hpp	/^	GLuint ColorLoc,TextureLoc,MatrixLoc,ScreenLoc;$/;"	m	class:NText
TextureLoc	NWindow.hpp	/^	GLuint TextureLoc;$/;"	m	class:NWindow	access:private
TextureWidth	NMap.hpp	/^	unsigned int TextureWidth;$/;"	m	class:NMap
Textures	NRender.hpp	/^	std::vector<NTexture*> Textures;$/;"	m	class:NRender	access:private
Textures	NText.hpp	/^	std::vector<NTextureAtlas*> Textures;$/;"	m	class:NFace
Tick	NButton.cpp	/^		Texture->Tick(DT);$/;"	p	file:	signature:(DT)
Tick	NButton.cpp	/^void NButton::Tick(double DT)$/;"	f	class:NButton	signature:(double DT)
Tick	NButton.hpp	/^	void Tick(double DT);$/;"	p	class:NButton	access:public	signature:(double DT)
Tick	NMap.cpp	/^void NMap::Tick(double DT)$/;"	f	class:NMap
Tick	NNode.cpp	/^void NNode::Tick(double DT) {}$/;"	f	class:NNode	signature:(double DT)
Tick	NNode.hpp	/^	virtual void Tick(double DT);$/;"	p	class:NNode	access:public	signature:(double DT)
Tick	NScene.cpp	/^void NScene::Tick()$/;"	f	class:NScene
Tick	NTexture.cpp	/^void NTexture::Tick(double DT)$/;"	f	class:NTexture	signature:(double DT)
Tick	NTexture.hpp	/^	void Tick(double DT);$/;"	p	class:NTexture	access:public	signature:(double DT)
Tick	NWindow.cpp	/^		Texture->Tick(DT);$/;"	p	file:	signature:(DT)
Tick	NWindow.cpp	/^void NWindow::Tick(double DT)$/;"	f	class:NWindow	signature:(double DT)
Tick	NWindow.hpp	/^	void Tick(double DT);$/;"	p	class:NWindow	access:public	signature:(double DT)
TileSize	NMap.hpp	/^	float TileSize;$/;"	m	class:NMap
Tiles	NMap.hpp	/^	std::vector<std::vector<std::vector<NTile* > > > Tiles;$/;"	m	class:NMap
UVs	NButton.hpp	/^	std::vector<glm::vec2> UVs;$/;"	m	class:NButton	access:private
UVs	NMap.hpp	/^	std::vector<std::vector<glm::vec2> > UVs;$/;"	m	class:NMap
UVs	NText.hpp	/^	std::vector<glm::vec2> UVs;$/;"	m	class:NText
UVs	NWindow.hpp	/^	std::vector<glm::vec2> UVs;$/;"	m	class:NWindow	access:private
UX	NButton.cpp	/^		float UX = BorderSize\/Texture->GetSize().x;$/;"	l
UX	NWindow.cpp	/^		float UX = BorderSize\/Texture->GetSize().x;$/;"	l
UY	NButton.cpp	/^		float UY = BorderSize\/Texture->GetSize().y;$/;"	l
UY	NWindow.cpp	/^		float UY = BorderSize\/Texture->GetSize().y;$/;"	l
UniLoc	NShader.hpp	/^	GLuint UniLoc;$/;"	m	class:NUniform	access:private
Uniforms	NShader.hpp	/^	std::vector<NUniform*> Uniforms;$/;"	m	class:NShader	access:private
UpdateMatrix	NNode.cpp	/^			Children[i]->UpdateMatrix();$/;"	p	file:	signature:()
UpdateMatrix	NNode.cpp	/^		Children[i]->UpdateMatrix();$/;"	p	file:	signature:()
UpdateMatrix	NNode.cpp	/^void NNode::UpdateMatrix()$/;"	f	class:NNode	signature:()
UpdateMatrix	NNode.hpp	/^	virtual void UpdateMatrix();$/;"	p	class:NNode	access:public	signature:()
UpdateMipmaps	NText.cpp	/^void NFace::UpdateMipmaps()$/;"	f	class:NFace
UpdateMipmaps	NText.cpp	/^void NTextureAtlas::UpdateMipmaps()$/;"	f	class:NTextureAtlas
VSync	NRender.hpp	/^	bool VSync;$/;"	m	class:NRender	access:private
Valid	NGame.hpp	/^	bool Valid;$/;"	m	class:NGame
Velocity	NText.hpp	/^	glm::vec2 Velocity;$/;"	m	class:NText
VertexFilePath	NShader.cpp	/^		std::cout << "Failed to compile " << VertexFilePath << "\\n";$/;"	l
VertexFilePath	NShader.cpp	/^		std::cout << "Failed to load " << VertexFilePath << "!\\n";$/;"	l
VertexFilePath	NShader.cpp	/^	std::cout << "Compiling shader " << VertexFilePath << "\\n";$/;"	l
VertexShaderCode	NShader.cpp	/^	std::string VertexShaderCode;$/;"	l
VertexShaderErrorMessage	NShader.cpp	/^	std::vector<char> VertexShaderErrorMessage(InfoLogLength);$/;"	p	file:	signature:(InfoLogLength)
VertexShaderID	NShader.cpp	/^	GLuint VertexShaderID = glCreateShader(GL_VERTEX_SHADER);$/;"	l
VertexShaderStream	NShader.cpp	/^	std::ifstream VertexShaderStream(VertexFilePath.c_str(), std::ios::in);$/;"	p	file:	signature:(VertexFilePath.c_str(), std::ios::in)
Verts	NButton.hpp	/^	std::vector<glm::vec2> Verts;$/;"	m	class:NButton	access:private
Verts	NMap.hpp	/^	std::vector<std::vector<glm::vec3> > Verts;$/;"	m	class:NMap
Verts	NText.hpp	/^	std::vector<glm::vec2> Verts;$/;"	m	class:NText
Verts	NWindow.hpp	/^	std::vector<glm::vec2> Verts;$/;"	m	class:NWindow	access:private
ViewMatrix	NCamera.hpp	/^	glm::mat4 ViewMatrix;$/;"	m	class:NCamera
Width	NGame.hpp	/^	int Width;$/;"	m	class:NGame
Width	NMap.hpp	/^	unsigned int Width,Height,Depth;$/;"	m	class:NMap
Width	NRender.hpp	/^	int Width, Height;$/;"	m	class:NCachedTexture	access:private
Width	NText.hpp	/^	float Width;$/;"	m	class:NText
Width	NText.hpp	/^	int Width, Height;$/;"	m	class:NTextureAtlas
WindowChanged	NGame.hpp	/^	bool WindowChanged;$/;"	m	class:NGame
X	NEngine.cpp	/^	float X = (float(rand())\/float(RAND_MAX))*Difference;$/;"	l
X	NText.hpp	/^	float X;$/;"	m	class:NGlyph
Yellow	NColor.hpp	14;"	d
Zoom	NCamera.hpp	/^	float Zoom;$/;"	m	class:NCamera
ar1	NLua.cpp	/^	lua_Debug ar1;$/;"	l
ar1	NTexture.cpp	/^		lua_Debug ar1;$/;"	l
ar2	NLua.cpp	/^	lua_Debug ar2;$/;"	l
ar2	NTexture.cpp	/^		lua_Debug ar2;$/;"	l
as_fn_append	config.status	/^  as_fn_append ()$/;"	f
as_fn_arith	config.status	/^  as_fn_arith ()$/;"	f
as_fn_error	config.status	/^as_fn_error ()$/;"	f
as_fn_exit	config.status	/^as_fn_exit ()$/;"	f
as_fn_mkdir_p	config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_set_status	config.status	/^as_fn_set_status ()$/;"	f
as_fn_unset	config.status	/^as_fn_unset ()$/;"	f
bindir	Makefile	/^bindir         	= ${exec_prefix}\/bin$/;"	m
clear	NButton.cpp	/^	UVs.clear();$/;"	p	file:	signature:()
clear	NButton.cpp	/^	Verts.clear();$/;"	p	file:	signature:()
clear	NWindow.cpp	/^	UVs.clear();$/;"	p	file:	signature:()
clear	NWindow.cpp	/^	Verts.clear();$/;"	p	file:	signature:()
close	NShader.cpp	/^	FragmentShaderStream.close();$/;"	p	file:	signature:()
close	NShader.cpp	/^	VertexShaderStream.close();$/;"	p	file:	signature:()
cout	NColor.cpp	/^	std::cout << "\\e[0m";$/;"	m	class:std	file:
cout	NConfig.cpp	/^		std::cout << "CONFIG WARN: ";$/;"	m	class:std	file:
cout	NInput.cpp	/^		std::cout << "Attempted to grab a key out of range!\\n";$/;"	m	class:std	file:
cout	NInput.cpp	/^		std::cout << "INPUT WARN: ";$/;"	m	class:std	file:
cout	NLua.cpp	/^			std::cout << "LUA INFO: ";$/;"	m	class:std	file:
cout	NLua.cpp	/^		std::cout << "LUA WARN: ";$/;"	m	class:std	file:
cout	NLua.cpp	/^	std::cout << "LUA INFO: ";$/;"	m	class:std	file:
cout	NShader.cpp	/^		std::cout << "Failed to link program!\\n";$/;"	m	class:std	file:
cout	NShader.cpp	/^		std::cout << "SHADER INFO: ";$/;"	m	class:std	file:
cout	NShader.cpp	/^		std::cout << "SHADER WARN: " ;$/;"	m	class:std	file:
cout	NShader.cpp	/^		std::cout << "SHADER WARN: ";$/;"	m	class:std	file:
cout	NShader.cpp	/^	std::cout << "SHADER INFO: ";$/;"	m	class:std	file:
cout	NTexture.cpp	/^		std::cout << "LUA WARN: ";$/;"	m	class:std	file:
cout	NTexture.cpp	/^	std::cout << "TEXTURE WARN: ";$/;"	m	class:std	file:
dirp	NLua.cpp	/^	dirent *dirp;$/;"	l
distdir	Makefile	/^distdir        	= $(tarname)-$(version)$/;"	m
dp	NLua.cpp	/^	DIR *dp;$/;"	l
erase	NNode.cpp	/^			Children.erase(Children.begin()+i);$/;"	p	file:	signature:(Children.begin()+i)
exec_prefix	Makefile	/^exec_prefix    	= ${prefix}$/;"	m
i_Name	NTexture.cpp	/^		std::cout << "Tried to use variable " << i_Name << " as a number (It's not a number or doesn't exist!).\\n";$/;"	l
insert	NLua.cpp	/^		Files.insert(Files.end(),NewFiles.begin(),NewFiles.end());$/;"	p	file:	signature:(Files.end(),NewFiles.begin(),NewFiles.end())
insert	NLua.cpp	/^		Folders.insert(Folders.end(),RFolders.begin(),RFolders.end());$/;"	p	file:	signature:(Folders.end(),RFolders.begin(),RFolders.end())
insert	NLua.cpp	/^	Files.insert(Files.end(),NewFiles.begin(),NewFiles.end());$/;"	p	file:	signature:(Files.end(),NewFiles.begin(),NewFiles.end())
luaL_checkstring	NTexture.cpp	/^		Animation->SetName(luaL_checkstring(L,3));$/;"	p	file:	signature:(L,3)
lua_checkAnimation	NTexture.cpp	/^		Texture->AddAnimation(lua_checkAnimation(L,i));$/;"	p	file:	signature:(L,i)
lua_checkAnimation	NTexture.cpp	/^NAnimation* lua_checkAnimation(lua_State* L, int narg)$/;"	f	signature:(lua_State* L, int narg)
lua_checkAnimation	NTexture.hpp	/^NAnimation* lua_checkAnimation(lua_State* L, int narg);$/;"	p	signature:(lua_State* L, int narg)
lua_pushAnimation	NTexture.cpp	/^void lua_pushAnimation(lua_State* L, NAnimation* Animation)$/;"	f	signature:(lua_State* L, NAnimation* Animation)
lua_toAnimation	NTexture.cpp	/^NAnimation* lua_toAnimation(lua_State* L, int index)$/;"	f	signature:(lua_State* L, int index)
lua_tostring	NLua.cpp	/^		std::cout << lua_tostring(L, -1) << "\\n";$/;"	p	file:	signature:(L, -1)
main	main.cpp	/^int main(int argc, char** argv)$/;"	f
objects	Makefile	/^objects			= NGame.o NColor.o NEngine.o NInput.o NCamera.o NNode.o NScene.o NRender.o NShader.o NText.o NTexture.o NLua.o NConfig.o NWindow.o NButton.o NPhysics.o$/;"	m
package	Makefile	/^package        	= astrostruct$/;"	m
prefix	Makefile	/^prefix         	= \/usr\/local$/;"	m
push_back	NNode.cpp	/^	Children.push_back(Node);$/;"	p	file:	signature:(Node)
push_back	NShader.cpp	/^	Uniforms.push_back(NewUniform);$/;"	p	file:	signature:(NewUniform)
push_back	NTexture.cpp	/^	Animations.push_back(Animation);$/;"	p	file:	signature:(Animation)
push_back	NTexture.cpp	/^	Frames.push_back(ID);$/;"	p	file:	signature:(ID)
srcdir	Makefile	/^srcdir			= .$/;"	m
stat_base	NLua.cpp	/^		struct stat stat_base;$/;"	l
std::cout	NColor.cpp	/^	std::cout << "\\e[0m";$/;"	m	class:std	file:
std::cout	NConfig.cpp	/^		std::cout << "CONFIG WARN: ";$/;"	m	class:std	file:
std::cout	NInput.cpp	/^		std::cout << "Attempted to grab a key out of range!\\n";$/;"	m	class:std	file:
std::cout	NInput.cpp	/^		std::cout << "INPUT WARN: ";$/;"	m	class:std	file:
std::cout	NLua.cpp	/^			std::cout << "LUA INFO: ";$/;"	m	class:std	file:
std::cout	NLua.cpp	/^		std::cout << "LUA WARN: ";$/;"	m	class:std	file:
std::cout	NLua.cpp	/^	std::cout << "LUA INFO: ";$/;"	m	class:std	file:
std::cout	NShader.cpp	/^		std::cout << "Failed to link program!\\n";$/;"	m	class:std	file:
std::cout	NShader.cpp	/^		std::cout << "SHADER INFO: ";$/;"	m	class:std	file:
std::cout	NShader.cpp	/^		std::cout << "SHADER WARN: " ;$/;"	m	class:std	file:
std::cout	NShader.cpp	/^		std::cout << "SHADER WARN: ";$/;"	m	class:std	file:
std::cout	NShader.cpp	/^	std::cout << "SHADER INFO: ";$/;"	m	class:std	file:
std::cout	NTexture.cpp	/^		std::cout << "LUA WARN: ";$/;"	m	class:std	file:
std::cout	NTexture.cpp	/^	std::cout << "TEXTURE WARN: ";$/;"	m	class:std	file:
tarname	Makefile	/^tarname        	= astrostruct$/;"	m
vec2	NButton.cpp	/^		UVs.push_back(glm::vec2(UX,0));$/;"	p	file:	signature:(UX,0)
vec2	NButton.cpp	/^		UVs.push_back(glm::vec2(UX,1));$/;"	p	file:	signature:(UX,1)
vec2	NButton.cpp	/^		UVs.push_back(glm::vec2(UX,1-UY));$/;"	p	file:	signature:(UX,1-UY)
vec2	NButton.cpp	/^		UVs.push_back(glm::vec2(UX,UY));$/;"	p	file:	signature:(UX,UY)
vec2	NButton.cpp	/^		Verts.push_back(glm::vec2(.5,-.5));$/;"	p	file:	signature:(.5,-.5)
vec2	NButton.cpp	/^		Verts.push_back(glm::vec2(.5,-.5+SY));$/;"	p	file:	signature:(.5,-.5+SY)
vec2	NButton.cpp	/^		Verts.push_back(glm::vec2(.5,.5));$/;"	p	file:	signature:(.5,.5)
vec2	NButton.cpp	/^		Verts.push_back(glm::vec2(.5,.5-SY));$/;"	p	file:	signature:(.5,.5-SY)
vec2	NButton.cpp	/^		Verts.push_back(glm::vec2(.5-SX,-.5));$/;"	p	file:	signature:(.5-SX,-.5)
vec2	NButton.cpp	/^		Verts.push_back(glm::vec2(.5-SX,-.5+SY));$/;"	p	file:	signature:(.5-SX,-.5+SY)
vec2	NButton.cpp	/^		Verts.push_back(glm::vec2(.5-SX,.5));$/;"	p	file:	signature:(.5-SX,.5)
vec2	NButton.cpp	/^		Verts.push_back(glm::vec2(.5-SX,.5-SY));$/;"	p	file:	signature:(.5-SX,.5-SY)
vec2	NNode.cpp	/^	SetScale(glm::vec2(W,H));$/;"	p	file:	signature:(W,H)
vec2	NNode.cpp	/^	SetScale(glm::vec2(i_Scale));$/;"	p	file:	signature:(i_Scale)
vec2	NWindow.cpp	/^		UVs.push_back(glm::vec2(UX,0));$/;"	p	file:	signature:(UX,0)
vec2	NWindow.cpp	/^		UVs.push_back(glm::vec2(UX,1));$/;"	p	file:	signature:(UX,1)
vec2	NWindow.cpp	/^		UVs.push_back(glm::vec2(UX,1-UY));$/;"	p	file:	signature:(UX,1-UY)
vec2	NWindow.cpp	/^		UVs.push_back(glm::vec2(UX,UY));$/;"	p	file:	signature:(UX,UY)
vec2	NWindow.cpp	/^		Verts.push_back(glm::vec2(.5,-.5));$/;"	p	file:	signature:(.5,-.5)
vec2	NWindow.cpp	/^		Verts.push_back(glm::vec2(.5,-.5+SY));$/;"	p	file:	signature:(.5,-.5+SY)
vec2	NWindow.cpp	/^		Verts.push_back(glm::vec2(.5,.5));$/;"	p	file:	signature:(.5,.5)
vec2	NWindow.cpp	/^		Verts.push_back(glm::vec2(.5,.5-SY));$/;"	p	file:	signature:(.5,.5-SY)
vec2	NWindow.cpp	/^		Verts.push_back(glm::vec2(.5-SX,-.5));$/;"	p	file:	signature:(.5-SX,-.5)
vec2	NWindow.cpp	/^		Verts.push_back(glm::vec2(.5-SX,-.5+SY));$/;"	p	file:	signature:(.5-SX,-.5+SY)
vec2	NWindow.cpp	/^		Verts.push_back(glm::vec2(.5-SX,.5));$/;"	p	file:	signature:(.5-SX,.5)
vec2	NWindow.cpp	/^		Verts.push_back(glm::vec2(.5-SX,.5-SY));$/;"	p	file:	signature:(.5-SX,.5-SY)
version	Makefile	/^version        	= 1.0$/;"	m
~NAnimation	NTexture.cpp	/^NAnimation::~NAnimation()$/;"	f	class:NAnimation	signature:()
~NAnimation	NTexture.hpp	/^	~NAnimation();$/;"	p	class:NAnimation	access:public	signature:()
~NButton	NButton.cpp	/^NButton::~NButton()$/;"	f	class:NButton	signature:()
~NButton	NButton.hpp	/^	~NButton();$/;"	p	class:NButton	access:public	signature:()
~NCachedTexture	NRender.cpp	/^NCachedTexture::~NCachedTexture()$/;"	f	class:NCachedTexture
~NCachedTexture	NRender.hpp	/^	~NCachedTexture();$/;"	p	class:NCachedTexture	access:public	signature:()
~NConfig	NConfig.cpp	/^NConfig::~NConfig()$/;"	f	class:NConfig	signature:()
~NConfig	NConfig.hpp	/^	~NConfig();$/;"	p	class:NConfig	access:public	signature:()
~NFace	NText.cpp	/^NFace::~NFace()$/;"	f	class:NFace
~NGame	NGame.cpp	/^NGame::~NGame()$/;"	f	class:NGame
~NGlyph	NText.cpp	/^NGlyph::~NGlyph()$/;"	f	class:NGlyph
~NLua	NLua.cpp	/^NLua::~NLua()$/;"	f	class:NLua	signature:()
~NLua	NLua.hpp	/^	~NLua();$/;"	p	class:NLua	access:public	signature:()
~NMap	NMap.cpp	/^NMap::~NMap()$/;"	f	class:NMap
~NNode	NNode.cpp	/^NNode::~NNode()$/;"	f	class:NNode	signature:()
~NNode	NNode.hpp	/^	~NNode();$/;"	p	class:NNode	access:public	signature:()
~NRender	NRender.cpp	/^NRender::~NRender()$/;"	f	class:NRender
~NRender	NRender.hpp	/^	~NRender();$/;"	p	class:NRender	access:public	signature:()
~NScene	NScene.cpp	/^NScene::~NScene()$/;"	f	class:NScene
~NShader	NShader.cpp	/^NShader::~NShader()$/;"	f	class:NShader	signature:()
~NShader	NShader.hpp	/^	~NShader();$/;"	p	class:NShader	access:public	signature:()
~NText	NText.cpp	/^NText::~NText()$/;"	f	class:NText
~NTextSystem	NText.cpp	/^NTextSystem::~NTextSystem()$/;"	f	class:NTextSystem
~NTexture	NTexture.cpp	/^NTexture::~NTexture()$/;"	f	class:NTexture	signature:()
~NTexture	NTexture.hpp	/^	~NTexture();$/;"	p	class:NTexture	access:public	signature:()
~NTextureAtlas	NText.cpp	/^NTextureAtlas::~NTextureAtlas()$/;"	f	class:NTextureAtlas
~NTile	NMap.cpp	/^NTile::~NTile()$/;"	f	class:NTile
~NUniform	NShader.hpp	/^	~NUniform();$/;"	p	class:NUniform	access:public	signature:()
~NWindow	NWindow.cpp	/^NWindow::~NWindow()$/;"	f	class:NWindow	signature:()
~NWindow	NWindow.hpp	/^	~NWindow();$/;"	p	class:NWindow	access:public	signature:()
